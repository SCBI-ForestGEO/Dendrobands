setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data")
data_2019 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2019.csv")
data_intra <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2019/data_entry_intraannual_2019-02.csv")
names2019 <- c(colnames(data_2019))
namesintra <- c(colnames(data_intra))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2019, namesintra)
## add these missed names to data_biannual in order to combine to the master
data_intra[missing] <- NA
data_intra$area <- NULL #this column is only relevant for field
data_intra$location <- NULL #only for when merging data pre-2018
test <- rbind(data_2019, data_intra)
test <- test[order(test[,"tag"], test[,"survey.ID"]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
View(test)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
## these values are not always constant
library(dplyr)
test$status <- ifelse((is.na(test$status))&(grepl("D", test$codes)), "dead",
ifelse(lag(test$status, 1) == "dead", "dead", "alive"))
View(test)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data")
data_2019 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2019.csv")
data_intra <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2019/data_entry_intraannual_2019-02.csv")
names2019 <- c(colnames(data_2019))
namesintra <- c(colnames(data_intra))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2019, namesintra)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_intra[missing] <- NA
data_intra$area <- NULL #this column is only relevant for field
data_intra$location <- NULL #only for when merging data pre-2018
test <- rbind(data_2019, data_intra)
test <- test[order(test[,"tag"], test[,"stemtag", test[,"survey.ID"]),] #order by tag and survey.ID
test <- test[order(test[,"tag"], test[,"stemtag"], test[,"survey.ID"]),] #order by tag and survey.ID
View(test)
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
library(dplyr)
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
test$status <- ifelse((is.na(test$status))&(grepl("D", test$codes)), "dead",
ifelse(lag(test$status, 1) == "dead", "dead",
ifelse(is.na(test$status), "alive", test$status)))
View(test)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data")
data_2019 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2019.csv")
data_intra <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2019/data_entry_intraannual_2019-02.csv")
names2019 <- c(colnames(data_2019))
namesintra <- c(colnames(data_intra))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2019, namesintra)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_intra[missing] <- NA
data_intra$area <- NULL #this column is only relevant for field
data_intra$location <- NULL #only for when merging data pre-2018
test <- rbind(data_2019, data_intra)
test <- test[order(test[,"tag"], test[,"stemtag"], test[,"survey.ID"]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
library(dplyr)
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
View(test)
test$status <- as.character(test$status)
test$status <- ifelse((is.na(test$status))&(grepl("D", test$codes)), "dead", na.locf(test$status))
View(test)
test$codes <- as.character(test$codes)
test$codes <- ifelse(is.na(test$codes), "", test$codes)
test$notes <- as.character(test$notes)
test$notes <- ifelse(is.na(test$notes), "", test$notes)
View(test)
write.csv(test, "scbi.dendroAll_2019.csv", row.names=FALSE)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/field_forms")
dendro19 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2019.csv")
#1a If don't have much time, focus on fixing the bands that need to be fixed ####
##these bands were marked as "RE" already from the field survey.
data_fix <- dendro19[which(dendro19$survey.ID == 2019.02), ]
data_fix <- dendro_fix[grep("RE", dendro_fix$codes), ]
data_fix <- data_fix[grep("RE", data_fix$codes), ]
View(data_fix)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
data_fix$location <- dendro_trees$location[match(data_fix$stemID, dendro_trees$stemID)]
data_field<-data_fix[ ,c("tag", "stemtag", "sp", "quadrat", "lx", "ly", "dbh", "measure", "codes", "location", "dendDiam", "dendroID", "type", "dendHt")]
data_field$measure = NA
data_field$dendDiam = NA
data_field$dendHt = NA
data_field$type = NA
data_field$dendroID = NA
data_field$codes <- gsub("[[:punct:]]*RE[[:punct:]]*", "", data_field$codes)
data_field$field.date = NA
data_field$dbhnew = NA
library(data.table)
setnames(data_field, old=c("codes", "stemtag"), new=c("codes&notes", "stem"))
data_field[is.na(data_field)] <- " "
data_field<-data_field[,c(1:7,15,16,12,13,11,14,8:10)]
data_field$location<-gsub("South", "S", data_field$location)
data_field$location<-gsub("North", "N", data_field$location)
matrix <- function(data_field, table_title) {
rbind(c(table_title, rep('', ncol(data_field)-1)), # title
names(data_field), # column names
unname(sapply(data_field, as.character))) # data
}
temp <- matrix(data_field, table_title=('Dendroband Replacement                       Date:                       SurveyID:                         Surveyors:'))
library(xlsx)
View(data_field)
write.xlsx(temp, "field_form_fix_2019.xlsx", row.names = FALSE, col.names=FALSE)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms")
data_entry<-data_fix[ ,c(1:2,9:12,3:6,22:25,21,27,13:18,7:8,19:20,26,28:31)]
cols <- c("survey.ID", "year", "month", "day", "dbh", "measure", "codes", "notes", "field.recorders", "data.enter", "dendDiam", "dendroID", "type", "dendHt")
data_entry[, cols] <- ""
data_entry$new.band <- 1
data_entry$dir <- NA
data_entry$crown.condition <- NA
data_entry$crown.illum <- NA
data_entry$location <- NULL #we don't need this column for data entry
library(data.table)
data_entry <- setnames(data_entry, old=c("dbh", "dendDiam"), new=c("dbh(mm)", "dendDiam(mm)"))
View(data_entry)
write.csv(data_entry, "data_entry_fix_2019.csv", row.names=FALSE)
