}
# check <- dbh[dbh$dbh_old == 0, ] #check if any tree was missed
trees_all$dbh_old <- dbh$dbh_old
trees_all$dbh_old <- ifelse(trees_all$dbh_old < 0, 0, trees_all$dbh_old)
trees_all$dbh_ln <- ifelse(trees_all$dbh_old == 0, NA, ln(trees_all$dbh_old))
##5e. remove all NAs ####
trees_all <- trees_all[complete.cases(trees_all), ]
##5f. remove resistance values >2 ####
trees_all <- trees_all[trees_all$resist.value <=2,]
##############################################################################################
#6. mixed effects model for output of #5. ####
library(lme4)
library(AICcmodavg) #aictab function
library(car)
library(piecewiseSEM) #for R^2 values for all model outputs in a list
library(MuMIn) #for R^2 values of one model output
##6a. Determine best model to use with AICc ####
#define response and effects
response <- "resist.value"
effects <- c("position", "tlp", "rp", "elev_m", "dbh_ln", "year", "(1 | sp)")
#create all combinations of random / fixed effects
effects_comb <-
unlist( sapply( seq_len(length(effects)),
function(i) {
apply( combn(effects,i), 2, function(x) paste(x, collapse = "+"))
}))
# pair response with effect and sub out combinations that don't include random effects
#in general, if two variables are >70% correlated, you can toss one of them without significantly affecting the results
var_comb <- expand.grid(response, effects_comb)
var_comb <- var_comb[grepl("1", var_comb$Var2), ] #only keep in fixed/random combos
var_comb <- var_comb[grepl("year", var_comb$Var2), ] #keep year in for drought sake
# formulas for all combinations. $Var1 is the response, and $Var2 is the effect
# for good stats, you should have no more total parameters than 1/10th the number of observations in your dataset
formula_vec <- sprintf("%s ~ %s", var_comb$Var1, var_comb$Var2)
# create list of model outputs
lmm_all <- lapply(formula_vec, function(x){
fit1 <- lmer(x, data = trees_all, REML=FALSE)
#fit1$coefficients <- coef( summary(fit1))
return(fit1)
})
names(lmm_all) <- formula_vec
var_aic <- aictab(lmm_all, second.ord=TRUE, sort=TRUE) #rank based on AICc
r <- rsquared(lmm_all) #gives R^2 values for models. "Marginal" is the R^2 for just the fixed effects, "Conditional" is the R^2 for everything.
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value)) +
facet_wrap(~sp, nrow=4) +
geom_point(aes(fill=year)) +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
#geom_smooth(method="lm") +
#theme(legend.position = "right") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)")
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, fill=year)) +
facet_wrap(~sp, nrow=4) +
geom_point() +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
#geom_smooth(method="lm") +
#theme(legend.position = "right") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)")
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, fill=year)) +
facet_wrap(~sp, nrow=4) +
geom_point() +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)")
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, fill=year)) +
facet_wrap(~sp, nrow=4) +
geom_point() +
scale_fill_manual(values=c("sky blue", "blue", "navy")) +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)")
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, fill=year)) +
facet_wrap(~sp, nrow=4) +
geom_point() +
scale_fill_continuous(values=c("sky blue", "blue", "navy")) +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)")
?scale_fill_continuous
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, fill=year)) +
facet_wrap(~sp, nrow=4) +
geom_point() +
scale_fill_continuous(type="viridis") +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)")
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
facet_wrap(~sp, nrow=4) +
geom_point() +
scale_fill_continuous(type="viridis") +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)")
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_fill_continuous(type="viridis") +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all) +
geom_point(aes(x = dbh_ln, y = resist.value, color=year)) +
scale_fill_continuous(type="viridis") +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all) +
geom_point(aes(x = dbh_ln, y = resist.value, color=year)) +
scale_fill_continuous(type="viridis") +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(x=dbh_ln, y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all) +
geom_point(aes(x = dbh_ln, y = resist.value, color=year, fill=year)) +
scale_fill_continuous(type="viridis") +
#scale_fill_gradientn(colors=c("light blue")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(x=dbh_ln, y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_color_manual(values=c("sky blue", "blue", "navy")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_color_manual(values=c("green", "blue", "yellow")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
?scale_color_manual
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_color_manual() +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_color_brewer(palette="Blues") +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_fill_brewer(palette="Blues") +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
?geom_smooth
trees_all$year <- as.character(trees_all$year)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_fill_brewer(palette="Blues") +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
sky blue
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_color_manual(values=c("skyblue", "blue", "navy")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_color_manual(values=c("skyblue", "blue", "navy")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
geom_smooth(method="lm") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
scale_color_manual(values=c("skyblue", "blue", "navy")) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
#geom_smooth(method="lm") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
trees_all$year <- as.numeric(trees_all$year)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
#scale_color_manual(values=c("skyblue", "blue", "navy")) +
scale_fill_gradient2(midpoint = 3) +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
#geom_smooth(method="lm") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
#scale_color_manual(values=c("skyblue", "blue", "navy")) +
scale_color_distiller(palette = "RdPu") +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
#geom_smooth(method="lm") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
?scale_color_distiller
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
#scale_color_manual(values=c("skyblue", "blue", "navy")) +
scale_color_distiller(palette = "Spectral") +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
#geom_smooth(method="lm") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
#scale_color_manual(values=c("skyblue", "blue", "navy")) +
scale_color_distiller(palette = "Spectral") +
theme_classic() +
geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
geom_smooth(method="lm") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
#this plot shows regression line for certain variables against resistance values, separated by year and species
ggplot(trees_all, aes(x = dbh_ln, y = resist.value, color=year)) +
geom_point() +
#scale_color_manual(values=c("skyblue", "blue", "navy")) +
scale_color_distiller(palette = "Spectral") +
theme_classic() +
#geom_line(data = cbind(trees_all, pred = predict(lmm_all[[32]])), aes(y = pred)) +
geom_smooth(method="lm") +
ylab("(growth during drought) / (growth prior to drought)") +
xlab("DBH (log-transformed)") +
facet_wrap(~sp, nrow=4)
library(pointRes)
library(dplR)
library(data.table)
##to be clear, I wrote this code before I realized that some of the work done in these loops had already been done in the outputs of res.comp (specifically out.select). However, since the code runs well, and I double-checked that it was giving the same outputs as analyzing out.select, I'm keeping it as is.
##4a. canopy ####
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_cores/chronologies/current_chronologies/complete/separated by canopy position/canopy_cores")
dirs_can <- dir("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_cores/chronologies/current_chronologies/complete/separated by canopy position/canopy_cores", pattern = "_canopy.rwl")
dirs_can <- dirs_can[dirs_can != "frni_canopy.rwl" & dirs_can != "frni_drop_canopy.rwl" & dirs_can != "caco_drop_canopy.rwl"]
sp_can <- gsub("_drop_canopy.rwl", "", dirs_can)
canopy <- list()
widths_can <- list()
canopy_table <- NULL
for (i in seq(along=dirs_can)){
for (j in seq(along=sp_can)){
if (i==j){
file <- dirs_can[[i]]
rings <- read.rwl(file) #read in rwl file
area <- bai.in(rings) #convert to bai.in
testr <- res.comp(area, nb.yrs=5, res.thresh.neg = 30, series.thresh = 50) #get resilience metrics
canopy[[i]] <- testr
widths_can[[i]] <- rings
testr_table <- data.frame(testr$out)
testr_table <- testr_table[testr_table$nb.series > 4, ] #remove where there are < 4 series
testr_table$sp <- sp_can[[j]]
testr_table$position <- "canopy"
canopy_table <- rbind(canopy_table, testr_table)
}
values <- paste0(sp_can, "_can_res")
names(canopy) <- values
values <- paste0(sp_can, "_canopy")
names(widths_can) <- values
##4b. subcanopy ####
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_cores/chronologies/current_chronologies/complete/separated by canopy position/subcanopy_cores")
dirs_subcan <- dir("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_cores/chronologies/current_chronologies/complete/separated by canopy position/subcanopy_cores", pattern = "_subcanopy.rwl")
#dirs_subcan <- dirs_subcan[dirs_subcan != "frni_drop_subcanopy.rwl" & dirs_subcan != "caco_drop_subcanopy.rwl"]
sp_subcan <- gsub("_drop_subcanopy.rwl", "", dirs_subcan)
subcanopy <- list()
widths_sub <- list()
subcanopy_table <- NULL
for (i in seq(along=dirs_subcan)){
for (j in seq(along=sp_subcan)){
if (i==j){
file <- dirs_subcan[[i]]
rings <- read.rwl(file) #read in rwl file
area <- bai.in(rings) #convert to bai.in
test <- res.comp(area, nb.yrs=5, res.thresh.neg = 30, series.thresh = 50) #get resilience metrics
subcanopy[[i]] <- test
widths_sub[[i]] <- rings
test_table <- data.frame(test$out)
test_table <- test_table[test_table$nb.series > 4, ] #remove where there are < 4 series
test_table$sp <- sp_subcan[[j]]
test_table$position <- "subcanopy"
subcanopy_table <- rbind(subcanopy_table, test_table)
}
values_sub <- paste0(sp_subcan, "_subcan_res")
names(subcanopy) <- values_sub
values <- paste0(sp_subcan, "_subcanopy")
names(widths_sub) <- values
widths <- c(widths_can, widths_sub) #combine into one, then delete. For use in #5d
widths_can <- NULL
widths_subcan <- NULL
##4c. df for pointer years of all trees combined ####
full_ind <- rbind(canopy_table, subcanopy_table) #full table of indices for canopy and subcanopy cores
pointers <- full_ind[full_ind$nature == -1, ]
library(dplyr)
years_point <- count(pointers, vars=year) #counts the occurrences of each unique year
colnames(years_point) <- c("yr", "n.pointer")
years_point <- years_point[order(years_point$n.pointer, decreasing=TRUE), ]
#top drought years by species and canopy position
years_bysp <- pointers[pointers$year %in% c(1966, 1977, 1999), ]
years_bysp <- years_bysp[, c(1,13,14,2:12)]
years_bysp <- years_bysp[order(years_bysp$year, years_bysp$sp), ]
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation")
#write.csv(pointers, "occurrence_of_pointer_yrs.csv", row.names=FALSE)
##4d. resistance metrics for all trees ####
neil_list <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation/core_list_for_neil.csv", stringsAsFactors = FALSE)
neil_list$tag <- paste0("X", neil_list$tag) #to match the colnames of can_resist below
# pointer_years <- head(years_point$yr) #from above in #4c
# pointer_years <- pointer_years[!pointer_years %in% c(1911, 1947, 1991)]
pointer_years <- c(1964, 1966, 1977, 1999)
###canopy ####
#this loop says, for the different species in the list "canopy" (names(canopy)), create a dataframe of only the resistance index. Make a list of the colnames, which are the individual trees. Then, assign species identifiers for each one from Neil's core list, subset by the defined pointer years, and melt the data before rbinding.
tag_n <- names(canopy)
trees_canopy <- NULL
for (i in seq(along=1:length(tag_n))){
can_resist <- data.frame(canopy[[i]]$resist)
years <- rownames(can_resist)
colnames(can_resist) <- gsub("A", "", colnames(can_resist))
tree_series <- colnames(can_resist)
# for (j in seq(along=tree_series)){
#  trees <- tree_series[[j]]
ind <- can_resist
ind_neil <- neil_list[neil_list$tag %in% tree_series, ]
#  colnames(ind) <- trees
ind$year <- years
ind$sp <- unique(ind_neil$sp)
ind$position <- "canopy"
ind <- ind[ind$year %in% pointer_years, ]
change <- melt(ind)
setnames(change, old=c("variable", "value"), new=c("tree", "resist.value"))
change$tree <- gsub("X", "", change$tree)
change$tree <- gsub("^0", "", change$tree)
trees_canopy <- rbind(trees_canopy, change)
}
###subcanopy ####
#this loop says, for the different species in the list "subcanopy" (names(subcanopy)), create a dataframe of only the resistance index. Make a list of the colnames, which are the individual trees. Then, assign species identifiers for each one from Neil's core list, subset by the defined pointer years, and melt the data before rbinding.
tag_n <- names(subcanopy)
trees_subcanopy <- NULL
for (i in seq(along=1:length(tag_n))){
sub_resist <- data.frame(subcanopy[[i]]$resist)
years <- rownames(sub_resist)
colnames(sub_resist) <- gsub("A", "", colnames(sub_resist))
tree_series <- colnames(sub_resist)
# for (j in seq(along=tree_series)){
#  trees <- tree_series[[j]]
ind <- sub_resist
ind_neil <- neil_list[neil_list$tag %in% tree_series, ]
#  colnames(ind) <- trees
ind$year <- years
ind$sp <- unique(ind_neil$sp)
ind$position <- "subcanopy"
ind <- ind[ind$year %in% pointer_years, ]
change <- melt(ind)
setnames(change, old=c("variable", "value"), new=c("tree", "resist.value"))
change$tree <- gsub("X", "", change$tree)
change$tree <- gsub("^0", "", change$tree)
trees_subcanopy <- rbind(trees_subcanopy, change)
}
###rbind together ####
trees_all <- rbind(trees_canopy, trees_subcanopy)
trees_all$year <- as.numeric(trees_all$year)
#subset out NAs for resistance values (not necessary, bc lmm will automatically exclude them)
trees_all <- trees_all[!is.na(trees_all$resist.value), ]
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/maps")
neil_map <- neil_list
neil_map$tag <- gsub("X", "", neil_map$tag)
neil_map$tag <- as.numeric(neil_map$tag)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
##this should be fixed when 131352 is found with 2018 data!!!!
library(ggplot2)
library(rgdal)
library(broom) #for the tidy function
library(sf) #for mapping
library(ggthemes) #for removing graticules when making pdf
scbi_plot <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/20m_grid.shp")
deer <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/deer_exclosure_2011.shp")
roads <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/SCBI_roads_edits.shp")
streams <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/SCBI_streams_edits.shp")
NS_divide <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/maps/shapefiles/NS_divide1.shp")
#convert all shp to dataframe so that it can be used by ggplot
#if tidy isn't working, can also do: xxx_df <- as(xxx, "data.frame")
scbi_plot_df <- tidy(scbi_plot)
deer_df <- tidy(deer)
roads_df <- tidy(roads)
streams_df <- tidy(streams)
NS_divide_df <- tidy(NS_divide)
map <- ggplot() +
geom_path(data = scbi_plot_df, aes(x = long, y = lat, group = group))+
geom_path(data=roads_df, aes(x=long, y=lat, group=group),
color="#996600", linetype=2)+
geom_path(data=streams_df, aes(x=long, y=lat, group=group), color="blue")+
geom_path(data=deer_df, aes(x=long, y=lat, group=group), size=1.1)+
geom_point(data=neil_list, aes(x=NAD83_X, y=NAD83_Y), shape=19)+
geom_text(data=neil_list, aes(x=NAD83_X, y=NAD83_Y, label=tag),
size=3, hjust=1.25, nudge_y=-1, nudge_x=1, check_overlap=TRUE)+
theme(plot.title=element_text(vjust=0.1))+
coord_sf(crs = "crs = +proj=merc", xlim=c(747350,747800), ylim=c(4308500, 4309125))
map
library(geosphere)
View(neil_map)
neil_map_sub <- neil_map[, c(23:24)]
dist2Line(neil_map_sub, streams)
neil_map_sub <- neil_map[, c(25:26)]
neil_map_sub <- neil_map_sub[,c(2,1)]
dist2Line(neil_map_sub, streams)
View(streams_df)
neil_map_sub <- neil_map[, c(23:24)]
streams_sub <- streams[,c(1:2)]
dist2Line(neil_map_sub, streams_sub)
?dist2Line
View(streams_df)
wgs84 = "+init=epsg:4326"
bng = '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000
+ellps=airy +datum=OSGB36 +units=m +no_defs'
ConvertCoordinates <- function(easting,northing) {
out = cbind(easting,northing)
mask = !is.na(easting)
sp <-  sp::spTransform(sp::SpatialPoints(list(easting[mask],northing[mask]),proj4string=sp::CRS(bng)),sp::CRS(wgs84))
out[mask,]=sp@coords
out
}
ConvertCoordinates(streams_sub)
View(streams_sub)
neil_map_sub <- neil_map[, c(23:24)]
streams_sub <- streams_df[,c(1:2)]
dist2Line(neil_map_sub, streams_sub)
ConvertCoordinates(streams_sub$long, streams_sub$lat)
d <- ConvertCoordinates(streams_sub$long, streams_sub$lat)
streams_dd <- spTransform(streams, CRS("+proj=longlat +datum=WGS84"))
streams_df <- tidy(streams_dd)
streams_dd_df <- tidy(streams_dd)
View(streams_dd_df)
streams_sub <- streams_dd_df[,c(1:2)]
dist2Line(neil_map_sub, streams_sub)
neil_map_sub <- neil_map[, c(25:26)]
dist2Line(neil_map_sub, streams_sub)
dist_water <- dist2Line(neil_map_sub, streams_sub)
dist_water <- data.frame(dist2Line(neil_map_sub, streams_sub))
View(dist_water)
View(neil_map_sub)
?gdistance
library(gdistance)
?gdistance
