library(ggthemes) #for removing graticules when making pdf
library(rgeos) #for distance calculation
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/maps")
## as an example, let's use dendroband trees, subsetted for live trees
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro_trees <- dendro_trees[is.na(dendro_trees$mortality.year), ]
# upload shapefiles
scbi_plot <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/20m_grid.shp")
deer <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/deer_exclosure_2011.shp")
roads <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/SCBI_roads_edits.shp")
streams <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/SCBI_streams_edits.shp")
NS_divide <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/maps/shapefiles/NS_divide1.shp")
#convert all shp to dataframe so that it can be used by ggplot
#if tidy isn't working, can also do: xxx_df <- as(xxx, "data.frame")
scbi_plot_df <- tidy(scbi_plot)
deer_df <- tidy(deer)
roads_df <- tidy(roads)
streams_df <- tidy(streams)
NS_divide_df <- tidy(NS_divide)
#x and y give the x/yposition on the plot; sprintf says to add 0 for single digits, the x/y=seq(...,length.out) says fit the label within these parameters, fitting the length of the label evenly.
##this code adds the row and column numbers based on coordinates
rows <- annotate("text", x = seq(747350, 747365, length.out = 32), y = seq(4309125, 4308505, length.out = 32), label = sprintf("%02d", 32:1) , size=5.25, color="black")
cols <- annotate("text", x = seq(747390, 747765, length.out = 20), y = seq(4308495, 4308505, length.out = 20), label = sprintf("%02d", 1:20), size=5.4, color="black")
map <- ggplot() +
geom_path(data = scbi_plot_df, aes(x = long, y = lat, group = group))+
geom_path(data=roads_df, aes(x=long, y=lat, group=group),
color="#996600", linetype=2)+
geom_path(data=streams_df, aes(x=long, y=lat, group=group), color="blue")+
geom_path(data=deer_df, aes(x=long, y=lat, group=group), size=1.1)+
geom_point(data=dendro_trees, aes(x=NAD83_X, y=NAD83_Y), shape=19)+
geom_text(data=dendro_trees, aes(x=NAD83_X, y=NAD83_Y, label=tag),
size=3, hjust=1.25, nudge_y=-1, nudge_x=1, check_overlap=TRUE)+
labs(title="ForestGEO Plot")+
theme(plot.title=element_text(vjust=0.1))+
coord_sf(crs = "crs = +proj=merc", xlim=c(747350,747800), ylim=c(4308500, 4309125))+
rows +
cols
map
View(dendro_trees)
dendro_sub <- dendro_trees[, c(1:6,8:9)]
View(dendro_sub)
dendro_points <- SpatialPoints(dendro_trees_map, proj4string = CRS(as.character("+proj=merc")))
dendro_trees <- dendro_trees[complete.cases(dendro_trees)] #you MUST have complete data
dendro_sub <- dendro_trees[, c(1:6,8:9)]
## as an example, let's use dendroband trees, subsetted for live trees
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro_trees <- dendro_trees[is.na(dendro_trees$mortality.year), ]
dendro_trees <- dendro_trees[complete.cases(dendro_trees)] #you MUST have complete data
dendro_trees <- dendro_trees[is.na(dendro_trees$mortality.year), ]
## as an example, let's use dendroband trees, subsetted for live trees
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro_trees <- dendro_trees[is.na(dendro_trees$mortality.year), ]
dendro_trees <- dendro_trees[complete.cases(dendro_trees), ] #you MUST have complete data
## as an example, let's use dendroband trees, subsetted for live trees
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro_trees <- dendro_trees[is.na(dendro_trees$mortality.year), ]
dendro_trees <- dendro_trees[, complete.cases(dendro_trees)] #you MUST have complete data
## as an example, let's use dendroband trees, subsetted for live trees
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro_trees <- dendro_trees[is.na(dendro_trees$mortality.year), ]
dendro_trees <- complete.cases(dendro_trees) #you MUST have complete data
## as an example, let's use dendroband trees, subsetted for live trees
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro_trees <- dendro_trees[is.na(dendro_trees$mortality.year), ]
dendro_trees <- dendro_trees[!is.na(dendro_trees$NAD83_X), ] #you MUST have complete data
dendro_sub <- dendro_trees[, c(1:6,8:9)]
## calculating the distance requires some conversion. First, the points of the trees from must be in their own dataframe before they can be converted to a SpatialPoints object.
## in this example we're staying with UTM lon/lat that's used in the full map projection
## probably this can also be done using dd but just double check the projection
dendro_trees_map <- dendro_trees[, c(23:24)]
dendro_points <- SpatialPoints(dendro_trees_map, proj4string = CRS(as.character("+proj=merc")))
## here, the minimum distance to water is calculated before binding back to dendro_sub from above.
## A warning says that dendro_points and streams are projected differently, but the output has been verified to be accurate.
distance_water <- data.frame(apply(gDistance(dendro_points, streams, byid=TRUE), 2, min))
colnames(distance_water) <- "distance"
distance <- cbind(dendro_sub, distance_water)
View(distance_water)
View(distance)
## to double check the accuracy of the calculation, make a subset of all trees close to the stream (e.g. at most 30m away) and map them.
distance_short <- distance[distance$distance_water <= 30, ]
View(distance)
## to double check the accuracy of the calculation, make a subset of all trees close to the stream (e.g. at most 30m away) and map them.
distance_short <- distance[distance$distance <= 30, ]
map <- ggplot() +
geom_path(data = scbi_plot_df, aes(x = long, y = lat, group = group))+
geom_path(data=roads_df, aes(x=long, y=lat, group=group),
color="#996600", linetype=2)+
geom_path(data=streams_df, aes(x=long, y=lat, group=group), color="blue")+
geom_path(data=deer_df, aes(x=long, y=lat, group=group), size=1.1)+
geom_point(data=distance_short, aes(x=NAD83_X, y=NAD83_Y), shape=19)+
geom_text(data=distance_short, aes(x=NAD83_X, y=NAD83_Y, label=tag),
size=3, hjust=1.25, nudge_y=-1, nudge_x=1, check_overlap=TRUE)+
theme(plot.title=element_text(vjust=0.1))+
coord_sf(crs = "crs = +proj=merc", xlim=c(747350,747800), ylim=c(4308500, 4309125))+
rows+
cols
map
dendro_sub <- dendro_trees[, c(1:6,8:9,23:24)]
distance <- cbind(dendro_sub, distance_water)
colnames(distance_water) <- "dist"
distance <- cbind(dendro_sub, distance_water)
## to double check the accuracy of the calculation, make a subset of all trees close to the stream (e.g. at most 30m away) and map them.
distance_short <- distance[distance$dist <= 30, ]
map <- ggplot() +
geom_path(data = scbi_plot_df, aes(x = long, y = lat, group = group))+
geom_path(data=roads_df, aes(x=long, y=lat, group=group),
color="#996600", linetype=2)+
geom_path(data=streams_df, aes(x=long, y=lat, group=group), color="blue")+
geom_path(data=deer_df, aes(x=long, y=lat, group=group), size=1.1)+
geom_point(data=distance_short, aes(x=NAD83_X, y=NAD83_Y), shape=19)+
geom_text(data=distance_short, aes(x=NAD83_X, y=NAD83_Y, label=tag),
size=3, hjust=1.25, nudge_y=-1, nudge_x=1, check_overlap=TRUE)+
theme(plot.title=element_text(vjust=0.1))+
coord_sf(crs = "crs = +proj=merc", xlim=c(747350,747800), ylim=c(4308500, 4309125))+
rows+
cols
map
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights")
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights/SCBI_tree_heights.csv")
View(heights)
heights <- heights[,c(1:3,5:8)]
setnames(heights, old="species.code", new="sp")
library(data.table)
setnames(heights, old="species.code", new="sp")
View(heights)
heights$dbh_year <- ifelse(!is.na(heights$DBH.2008.cm), 2008, 2013)
View(heights)
heights$dbh_cm <- heights$DBH.2008.cm + heights$DBH.2013.cm
View(heights)
heights$DBH.2008.cm <- ifelse(is.na(heights$DBH.2008.cm, 0, heights$DBH.2008.cm))
heights$DBH.2008.cm <- ifelse(is.na(heights$DBH.2008.cm), 0, heights$DBH.2008.cm)
View(heights)
heights$DBH.2013.cm <- ifelse(is.na(heights$DBH.2013.cm), 0, heights$DBH.2013.cm)
heights$dbh_cm <- heights$DBH.2008.cm + heights$DBH.2013.cm
View(heights)
heights <- heights[,c(1:5,9,8)]
View(heights)
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights/SCBI_tree_heights.csv")
View(heights)
heights <- heights[,c(1:3,5:6)]
View(heights)
library(data.table)
setnames(heights, old="species.code", new="sp")
dbh_2013 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem2.csv")
dbh_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/scbi.stem3_TEMPORARY.csv")
heights_2013 <- heights[heights$height.year < 2018, ]
View(heights_2013)
heights_2018 <- heights[heights$height.year == 2018, ]
heights$stemID <- ifelse(heights$tag == dbh_2013$tag & heights$stemtag == dbh_2013$stemtag, dbh_2013$stemID, heights$stemID)
i=1
sub <- dbh_2013[dbh_2013$tag == dbh_2013$tag[[i]], ]
View(sub)
heights$stemID <- ifelse(heights$tag == sub$tag & heights$stemtag == sub$stemtag, sub$stemID, heights$stemID)
heights$stemID <- ifelse(heights$tag %in% sub$tag & heights$stemtag %in% sub$stemtag, sub$stemID, heights$stemID)
w <- dbh_2013[dbh_2013$tag %in% heights$tag, ]
for (i in seq(along=dbh_2013$tag)){
sub <- dbh_2013[dbh_2013$tag == dbh_2013$tag[[i]], ]
heights$stemID <- ifelse(heights$tag %in% sub$tag & heights$stemtag %in% sub$stemtag, sub$stemID, NA)
}
View(heights)
10080 %in% w$tag
for (i in seq(along=dbh_2013$tag)){
for (j in seq(along=heights$tag)){
sub <- dbh_2013[dbh_2013$tag == dbh_2013$tag[[i]], ]
heights$stemID <- ifelse(heights$tag[[j]] %in% sub$tag & heights$stemtag %in% sub$stemtag, sub$stemID, heights$stemID)
}
View(w)
for (i in seq(along=dbh_2013$tag)){
for (j in seq(along=heights$tag)){
sub <- dbh_2013[dbh_2013$tag == dbh_2013$tag[[i]], ]
heights$stemID <- ifelse(heights$tag[[j]] %in% sub$tag & heights$stemtag %in% sub$StemTag, sub$stemID, heights$stemID)
}
for (i in seq(along=w$tag)){
for (j in seq(along=heights$tag)){
sub <- w[w$tag == w$tag[[i]], ]
heights$stemID <- ifelse(heights$tag[[j]] %in% sub$tag & heights$stemtag %in% sub$StemTag, sub$stemID, heights$stemID)
}
View(heights)
i=1
j=1\
j=1
sub <- w[w$tag == w$tag[[i]], ]
heights$tag[[j]] %in% sub$tag
setdiff(w$tag, heights$tag)
View(w)
heights$tag[[j]]
View(sub)
height_sub <- heights[heights$tag == heights$tag[[j]], ]
View(height_sub)
w$tag[[i]]
sub <- w[w$tag == heights$tag[[i]], ]
View(sub)
heights$stemID[[i]]
sub$stemID
heights$stemID[[i]] <- sub$stemID
View(heights)
for (i in seq(along=heights$tag)){
sub <- w[w$tag == heights$tag[[i]], ]
heights$stemID[[i]] <- sub$stemID
}
for (i in seq(along=heights$tag)){
sub <- w[w$tag == heights$tag[[i]], ]
heights$stemID <- sub$stemID
}
View(heights)
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
heights_sub$stemID <- sub$stemID
View(heights_sub)
heights_all <- NULL
for (i in seq(along=heights$tag)){
sub <- w[w$tag == heights$tag[[i]], ]
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
heights_sub$stemID <- sub$stemID
heights_all <- rbind(heights_all, heights_sub)
}
sub <- w[w$tag == heights$tag[[i]], ]
View(sub)
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
View(heights_sub)
sub <- w[w$tag == heights$tag[[i]] & w$StemTag %in% heights_sub$stemtag, ]
View(sub)
heights_all <- NULL
for (i in seq(along=heights$tag)){
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
sub <- w[w$tag == heights$tag[[i]] & w$StemTag %in% heights_sub$stemtag, ]
heights_sub$stemID <- sub$stemID
heights_all <- rbind(heights_all, heights_sub)
}
View(heights_all)
View(heights)
View(heights_all)
heights_all <- NULL
for (i in seq(along=heights$tag)){
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
sub <- w[w$tag == heights_sub$tag & w$StemTag %in% heights_sub$stemtag, ]
heights_sub$stemID <- sub$stemID
heights_all <- rbind(heights_all, heights_sub)
}
warnings()
View(heights_sub)
View(w)
View(sub)
View(heights_sub)
View(heights_all)
i=32
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
sub <- w[w$tag == heights_sub$tag & w$StemTag %in% heights_sub$stemtag, ]
View(sub)
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
sub <- w[w$tag %in% heights_sub$tag & w$StemTag %in% heights_sub$stemtag, ]
heights_sub$stemID <- sub$stemID
View(heights_sub)
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights/SCBI_tree_heights.csv")
heights <- heights[,c(1:3,5:6)]
library(data.table)
setnames(heights, old="species.code", new="sp")
dbh_2013 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem2.csv")
dbh_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/scbi.stem3_TEMPORARY.csv")
w <- dbh_2013[dbh_2013$tag %in% heights$tag, ]
heights_all <- NULL
for (i in seq(along=heights$tag)){
heights_sub <- heights[heights$tag == heights$tag[[i]], ]
sub <- w[w$tag %in% heights_sub$tag & w$StemTag %in% heights_sub$stemtag, ]
heights_sub$stemID <- sub$stemID
heights_all <- rbind(heights_all, heights_sub)
}
View(heights_all)
heights_all <- heights_all[!duplicated(heights_all$stemID), ]
View(heights_all)
View(heights)
setdiff(heights$tag, heights_all$tag)
setdiff(heights$stemID, heights_all$stemID)
is.na(heights_all$stemID)
is.na(heights_all$tag)
View(heights_sub)
View(sub)
paste(dbh_2013$tag, dbh_2013$StemTag) %in% paste(heights$tag, heights$stemtag)
all(paste(dbh_2013$tag, dbh_2013$StemTag) %in% paste(heights$tag, heights$stemtag))
all(paste(heights$tag, heights$stemtag) %in% paste(dbh_2013$tag, dbh_2013$StemTag))
Tag))]
dbh_2013$stemID[match(paste(heights$tag, heights$stemtag), paste(dbh_2013$tag, dbh_2013$StemTag))]
heights$stemID <- dbh_2013$stemID[match(paste(heights$tag, heights$stemtag), paste(dbh_2013$tag, dbh_2013$StemTag))]
View(heights)
heights_2013 <- heights[heights$height.year < 2018, ]
heights_2018 <- heights[heights$height.year == 2018, ]
View(heights_2013)
heights_2013$dbh <- dbh_2013$dbh[match(heights$stemID, dbh_2013$stemID)]
heights_2013$dbh <- dbh_2013$dbh[match(heights_2013$stemID, dbh_2013$stemID)]
View(heights_2013)
heights_2018$dbh <- dbh_2018$dbh[match(heights_2018$stemID, dbh_2018$stemID)]
View(heights_2018)
heights_2018$dbh <- dbh_2018$dbh[match(heights_2018$stemID, dbh_2018$stemID)]
View(heights_2018)
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights/SCBI_tree_heights.csv")
heights <- heights[,c(1:3,5:6)]
library(data.table)
setnames(heights, old="species.code", new="sp")
dbh_2013 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem2.csv")
dbh_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/scbi.stem3_TEMPORARY.csv")
#get stemIDs for each stem
heights$stemID <- dbh_2013$stemID[match(paste(heights$tag, heights$stemtag), paste(dbh_2013$tag, dbh_2013$StemTag))]
heights_2013 <- heights[heights$height.year < 2018, ]
heights_2018 <- heights[heights$height.year == 2018, ]
heights_2013$dbh <- dbh_2013$dbh[match(heights_2013$stemID, dbh_2013$stemID)]
heights_2018$dbh <- dbh_2018$dbh[match(heights_2018$stemID, dbh_2018$stemID)]
heights_2018$dbh <- dbh_2018$DBHcm[match(heights_2018$stemID, dbh_2018$stemID)]
heights <- rbind(heights_2013, heights_2018)
View(heights)
heights_2013$dbh_year <- 2013
heights_2018$dbh_year <- 2018
heights <- rbind(heights_2013, heights_2018)
View(heights)
library(esquisse)
esquisse::esquisser()
ggplot(data = heights) +
aes(x = height.m, y = dbh) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
library(ggplot2)
ggplot(data = heights) +
aes(x = height.m, y = dbh) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
#bring in list of cored species we're using
neil_list <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation/core_list_for_neil.csv")
neil_sp <- unique(neil_list$sp)
View(neil_list)
#bring in list of cored species we're using
neil_list <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation/core_list_for_neil.csv", stringsAsFactors = FALSE)
neil_sp <- unique(neil_list$sp)
neil_sp
paper_heights <- heights[heights$sp %in% neil_sp, ]
View(paper_heights)
paper_heights <- paper_heights[order(paper_heights, sp), ]
paper_heights <- paper_heights[order(paper_heights$sp), ]
View(paper_heights)
paper_heights$sp <- as.character(paper_heights$sp)
View(paper_heights)
unique(paper_heights$sp)
check <- heights_2013[is.na(heights_2013$dbh), ]
check <- heights_2018[is.na(heights_2018$dbh), ]
View(check)
paper_heights <- paper_heights[complete.cases(paper_heights), ]
paper_heights <- paper_heights[order(paper_heights$sp), ]
View(paper_heights)
unique(paper_heights$sp)
View(paper_heights)
paper_heights <- paper_heights[!paper_heights$sp == "juni", ]
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
install.packages("ggplot2")
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights/SCBI_tree_heights.csv", stringsAsFactors = FALSE)
heights <- heights[,c(1:3,5:6)]
library(data.table)
setnames(heights, old="species.code", new="sp")
dbh_2013 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem2.csv")
dbh_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/scbi.stem3_TEMPORARY.csv")
#get stemIDs for each stem
heights$stemID <- dbh_2013$stemID[match(paste(heights$tag, heights$stemtag), paste(dbh_2013$tag, dbh_2013$StemTag))]
heights_2013 <- heights[heights$height.year < 2018, ]
heights_2018 <- heights[heights$height.year == 2018, ]
heights_2013$dbh <- dbh_2013$dbh[match(heights_2013$stemID, dbh_2013$stemID)]
heights_2013$dbh_year <- 2013
check <- heights_2013[is.na(heights_2013$dbh), ]
heights_2018$dbh <- dbh_2018$DBHcm[match(heights_2018$stemID, dbh_2018$stemID)]
heights_2018$dbh_year <- 2018
check <- heights_2018[is.na(heights_2018$dbh), ] #there are a number of NAs for 2018, presumably because these all died
heights <- rbind(heights_2013, heights_2018)
heights$dbh <- ifelse(is.na)
#bring in list of cored species we're using
neil_list <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation/core_list_for_neil.csv", stringsAsFactors = FALSE)
neil_sp <- unique(neil_list$sp)
paper_heights <- heights[heights$sp %in% neil_sp, ]
paper_heights <- paper_heights[complete.cases(paper_heights), ]
paper_heights <- paper_heights[order(paper_heights$sp), ]
unique(paper_heights$sp) #shows the sp that we have data for
paper_heights <- paper_heights[!paper_heights$sp == "juni", ] #juni has only one measure
library(ggplot2)
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2", lib.loc="~/R/win-library/3.5")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.5")
remove.packages("ggplot2", lib="~/R/win-library/3.5")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights/SCBI_tree_heights.csv", stringsAsFactors = FALSE)
heights <- heights[,c(1:3,5:6)]
library(data.table)
setnames(heights, old="species.code", new="sp")
dbh_2013 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem2.csv")
dbh_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/scbi.stem3_TEMPORARY.csv")
#get stemIDs for each stem
heights$stemID <- dbh_2013$stemID[match(paste(heights$tag, heights$stemtag), paste(dbh_2013$tag, dbh_2013$StemTag))]
heights_2013 <- heights[heights$height.year < 2018, ]
heights_2018 <- heights[heights$height.year == 2018, ]
heights_2013$dbh <- dbh_2013$dbh[match(heights_2013$stemID, dbh_2013$stemID)]
heights_2013$dbh_year <- 2013
check <- heights_2013[is.na(heights_2013$dbh), ]
heights_2018$dbh <- dbh_2018$DBHcm[match(heights_2018$stemID, dbh_2018$stemID)]
heights_2018$dbh_year <- 2018
check <- heights_2018[is.na(heights_2018$dbh), ] #there are a number of NAs for 2018, presumably because these all died
heights <- rbind(heights_2013, heights_2018)
heights$dbh <- ifelse(is.na)
#bring in list of cored species we're using
neil_list <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation/core_list_for_neil.csv", stringsAsFactors = FALSE)
neil_sp <- unique(neil_list$sp)
paper_heights <- heights[heights$sp %in% neil_sp, ]
paper_heights <- paper_heights[complete.cases(paper_heights), ]
paper_heights <- paper_heights[order(paper_heights$sp), ]
unique(paper_heights$sp) #shows the sp that we have data for
paper_heights <- paper_heights[!paper_heights$sp == "juni", ] #juni has only one measure
library(ggplot2)
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
?ggplot
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
stat_smooth(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
?stat_smooth
library(devtools)
source_gist("524eade46135f6348140")
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
my.formula <- dbh ~ height.m
install.packages("ggpmisc")
library(ggpmisc)
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
warnings()
View(paper_heights)
my.formula <- y ~ x
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
#equations for all at once
ggplot(data = paper_heights) +
aes(x = height.m, y = dbh) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal()
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = dbh, y = height.m) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
#equations for all species together
ggplot(data = paper_heights) +
aes(x = dbh, y = height.m) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal()
