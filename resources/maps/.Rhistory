data_intra$survey.ID = NA
data_intra$year = NA
data_intra$month = NA
data_intra$day = NA
data_intra$measure = NA
for (i in 1:nrow(data_intra)){
data_intra$codes <- ifelse(grepl("F", data_intra$codes), "F", "")
}
data_intra$notes = NA
data_intra$field.recorders = NA
data_intra$data.enter = NA
data_intra<-data_intra[,c(1,2,7,8,3:6,9:11,13:14,12)]
data_intra<-sapply(data_intra, as.character)
data_intra[is.na(data_intra)] <- " "
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/field_forms/2019")
data_2019 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2019.csv")
intra <- data_2019[data_2019$intraannual == "1", ]
data_intra <- NULL
for (i in seq(along=unique(intra$stemID))){
sub <- data_2019[data_2019$stemID == unique(intra$stemID)[[i]], ]
sub <- sub[sub$survey.ID == max(sub$survey.ID), ]
data_intra <- rbind(data_intra, sub)
}
data_intra$location <- dendro_trees$location[match(data_intra$stemID, dendro_trees$stemID)]
data_intra<-data_intra[ ,c("tag", "stemtag", "survey.ID", "year", "month", "day", "sp", "quadrat", "measure", "codes", "notes", "location", "field.recorders", "data.enter")]
data_intra$survey.ID = NA
data_intra$year = NA
data_intra$month = NA
data_intra$day = NA
data_intra$measure = NA
for (i in 1:nrow(data_intra)){
data_intra$codes <- ifelse(grepl("F", data_intra$codes), "F", "")
}
data_intra$notes = NA
data_intra$field.recorders = NA
data_intra$data.enter = NA
data_intra<-data_intra[,c(1,2,7,8,3:6,9:11,13:14,12)]
data_intra<-sapply(data_intra, as.character)
data_intra[is.na(data_intra)] <- " "
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/field_forms/2019")
data_2019 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2019.csv")
intra <- data_2019[data_2019$intraannual == "1", ]
data_intra <- NULL
for (i in seq(along=unique(intra$stemID))){
sub <- data_2019[data_2019$stemID == unique(intra$stemID)[[i]], ]
sub <- sub[sub$survey.ID == max(sub$survey.ID), ]
data_intra <- rbind(data_intra, sub)
}
data_intra$location <- dendro_trees$location[match(data_intra$stemID, dendro_trees$stemID)]
data_intra<-data_intra[ ,c("tag", "stemtag", "survey.ID", "year", "month", "day", "sp", "quadrat", "measure", "codes", "notes", "location", "field.recorders", "data.enter")]
data_intra$survey.ID = NA
data_intra$year = NA
data_intra$month = NA
data_intra$day = NA
data_intra$measure = NA
for (i in 1:nrow(data_intra)){
data_intra$codes <- ifelse(grepl("F", data_intra$codes), "F", "")
}
data_intra$notes = NA
data_intra$field.recorders = NA
data_intra$data.enter = NA
data_intra<-data_intra[,c(1,2,7,8,3:6,9:11,13:14,12)]
View(data_intra)
data_intra[is.na(data_intra)] <- " "
View(data_intra)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2019")
write.csv(data_intra, "data_entry_intraannual.csv", row.names=FALSE)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/maps")
#we are using dendro_trees for this code as opposed to "scbi.dendroAll_YEAR.csv" because
#1. dendro_trees reflects the data in the all of the YEAR files and
#2. dendro_trees has the necessary mapping information in lx/ly, gx/gy, NAD83X/Y, AND lat/lon in decimal degrees.
##THUS make sure dendro_trees is updated when making new maps
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
#to start off, filter by all the trees that are alive as of the end of last year's fall survey.
bands_2019 <- dendro_trees[is.na(dendro_trees$mortality.year), ]
bands_2019 <- bands_2019[complete.cases(bands_2019[, c("NAD83_X", "NAD83_Y")]),] # remove one tree with missing coordinates
##this should be fixed when 131352 is found with 2018 data!!!!
library(ggplot2)
library(rgdal)
library(broom) #for the tidy function
library(sf) #for mapping
library(ggthemes) #for removing graticules when making pdf
scbi_plot <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/20m_grid.shp")
deer <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/deer_exclosure_2011.shp")
roads <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/SCBI_roads_edits.shp")
streams <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/spatial_data/shapefiles/SCBI_streams_edits.shp")
contour_10m <- readOGR("V:/SIGEO/GIS_data/dendroband surveys/dendroband intraannual/contour10m_SIGEO_clipped.shp")
survey_areas <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/maps/shapefiles/biannual_survey_areas.shp")
NS_divide <- readOGR("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/maps/shapefiles/NS_divide1.shp")
#convert all shp to dataframe so that it can be used by ggplot
#if tidy isn't working, can also do: xxx_df <- as(xxx, "data.frame")
scbi_plot_df <- tidy(scbi_plot)
deer_df <- tidy(deer)
roads_df <- tidy(roads)
streams_df <- tidy(streams)
survey_areas_df <- tidy(survey_areas)
NS_divide_df <- tidy(NS_divide)
contour_10m_df <- tidy(contour_10m)
#x and y give the x/yposition on the plot; sprintf says to add 0 for single digits, the x/y=seq(...,length.out) says fit the label within these parameters, fitting the length of the label evenly.
##this code adds the row and column numbers based on coordinates
rows <- annotate("text", x = seq(747350, 747365, length.out = 32), y = seq(4309125, 4308505, length.out = 32), label = sprintf("%02d", 32:1) , size=5.25, color="black")
cols <- annotate("text", x = seq(747390, 747765, length.out = 20), y = seq(4308495, 4308505, length.out = 20), label = sprintf("%02d", 1:20), size=5.4, color="black")
#these are the numbers for the survey areas, following the survey_area shp border areas
section1 <- annotate("text", x= 747730, y= 4308705, label = "1", size=6, fontface=2)
section2 <- annotate("text", x= 747630, y= 4308683, label = "2", size=6, fontface=2)
section3 <- annotate("text", x= 747450, y= 4308717, label = "3", size=6, fontface=2)
section4 <- annotate("text", x= 747445, y= 4309000, label = "4", size=6, fontface=2)
section5 <- annotate("text", x= 747567, y= 4308920, label = "5", size=6, fontface=2)
section6 <- annotate("text", x= 747687, y= 4308923, label = "6", size=6, fontface=2)
section7 <- annotate("text", x= 747520, y= 4309100, label = "7", size=6, fontface=2)
section8 <- annotate("text", x= 747605, y= 4309100, label = "8", size=6, fontface=2)
section9 <- annotate("text", x= 747725, y= 4309045, label = "9", size=6, fontface=2)
#biannual survey map ####
map <- ggplot() +
geom_path(data = scbi_plot_df, aes(x = long, y = lat, group = group))+
geom_path(data=roads_df, aes(x=long, y=lat, group=group),
color="#996600", linetype=2)+
geom_path(data=streams_df, aes(x=long, y=lat, group=group), color="blue")+
geom_path(data=survey_areas_df, aes(x=long, y=lat, group=group), size=1.1)+
geom_point(data=bands_2019, aes(x=NAD83_X, y=NAD83_Y), shape=19)+
geom_text(data=bands_2019, aes(x=NAD83_X, y=NAD83_Y, label=tag),
size=3, hjust=1.25, nudge_y=-1, nudge_x=1, check_overlap=TRUE)+
labs(title="Dendrobands_Biannual_2019")+
theme(plot.title=element_text(vjust=0.1))+
coord_sf(crs = "crs = +proj=merc", xlim=c(747350,747800), ylim=c(4308500, 4309125))
sigeo <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem1.csv")
sigeo$quadrat_x <- as.numeric(as.character(sigeo$quadrat)) %/% 100
sigeo$quadrat_y <- as.numeric(as.character(sigeo$quadrat)) %% 100
names(sigeo)
sigeo$grid_x <- (sigeo$quadrat_x - 1)
sigeo$grid_y <- (sigeo$quadrat_y - 1)
NAD83.SW <- c(747385.521, 4308506.438)
NAD83.NW <- c(747370.676, 4309146.156)
grid2nad83 <- function(x, y) {
NAD83.X <- NAD83.SW[1] + (x*cos(Offset) + y*sin(Offset))
NAD83.Y <- NAD83.SW[2] + (-x*sin(Offset) + y*cos(Offset))
nad83 <- list(NAD83.X, NAD83.Y)
names(nad83) <- c("NAD83_X", "NAD83_Y")
nad83
}
sigeo<-data.frame(sigeo, grid2nad83(sigeo$gx, sigeo$gy))
utmcoor<-SpatialPoints(cbind(sigeo$NAD83_X, sigeo$NAD83_Y), proj4string=CRS("+proj=utm +zone=17N"))
longlatcoor<-spTransform(utmcoor,CRS("+proj=longlat"))
sigeo$lat<- coordinates(longlatcoor)[,2]
sigeo$lon <- coordinates(longlatcoor)[,1]
plot(sigeo$lon, sigeo$lat)
fram <- subset(sigeo, sp == "fram")
library(leaflet)
library(maps)
library(htmlwidgets)
library(maptools)
map_test <- leaflet(data = fram) %>%
addProviderTiles("CartoDB.Positron", group = "Map") %>%
# addMarkers(fram, lng = ~lon, lat = ~lat, label = ~tag) %>%
# addCircles( lng = ~lon, lat = ~lat, weight = 2, fillOpacity = 0.25) %>%
addCircleMarkers(data=fram[fram$DFstatus == "prior", ], lng=~lon , lat=~lat, radius=8 , color="black", fillColor="red", stroke = TRUE, fillOpacity = 0.8, group="dead") %>%
addCircleMarkers(data=fram[fram$DFstatus == "alive", ], lng=~lon , lat=~lat, radius=8, color="black", fillColor="blue", stroke = TRUE, fillOpacity = 0.8, group="alive") %>%
addScaleBar(position = "bottomleft") %>%
addLayersControl(
baseGroups = c("alive", "dead"),
options = layersControlOptions(collapsed = FALSE))
View(fram)
heights <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_heights/SCBI_tree_heights.csv", stringsAsFactors = FALSE)
heights <- heights[,c(1:3,5:6)]
library(data.table)
setnames(heights, old="species.code", new="sp")
dbh_2008 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem1.csv")
dbh_2008$dbh <- dbh_2008$dbh/10
dbh_2013 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem2.csv")
dbh_2013$dbh <- dbh_2013$dbh/10
dbh_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/scbi.stem3_TEMPORARY.csv", stringsAsFactors = FALSE)
#get stemIDs for each stem
heights$stemID <- dbh_2013$stemID[match(paste(heights$tag, heights$stemtag), paste(dbh_2013$tag, dbh_2013$StemTag))]
dbh_2018$tag <- gsub("_.*$", "", dbh_2018$Tree_ID_Num)
dbh_2018$stemtag <- gsub("[[:digit:]]*_", "", dbh_2018$Tree_ID_Num)
dbh_2018$tag <- as.numeric(as.character(dbh_2018$tag))
dbh_2018$stemtag <- as.numeric(as.character(dbh_2018$stemtag))
dbh_2018$stemID <- dbh_2013$stemID[match(paste(dbh_2018$tag, dbh_2018$stemtag), paste(dbh_2013$tag, dbh_2013$StemTag))]
#create subsets and match dbh by stemID
heights_2013 <- heights[heights$height.year < 2018, ]
heights_2018 <- heights[heights$height.year == 2018, ]
heights_2013$dbh <- dbh_2013$dbh[match(heights_2013$stemID, dbh_2013$stemID)]
heights_2013$dbh_year <- 2013
heights_2018$dbh <- dbh_2018$DBHcm[match(heights_2018$stemID, dbh_2018$stemID)]
heights_2018$dbh_year <- 2018
heights <- rbind(heights_2013, heights_2018)
#check which ones need dbh from previous census because they died
check <- heights[is.na(heights$dbh) | heights$dbh ==0, ]
heights$dbh <- ifelse(heights$dbh == 0 & heights$dbh_year == 2013,
dbh_2008$dbh[match(heights$stemID, dbh_2008$stemID)],
ifelse(is.na(heights$dbh) & heights$dbh_year == 2018,
dbh_2013$dbh[match(heights$stemID, dbh_2013$stemID)],
heights$dbh))
#check again before moving on
check <- heights[is.na(heights$dbh) | heights$dbh ==0, ]
#bring in list of cored species we're using
neil_list <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/McGregor_climate-sensitivity-variation/core_list_for_neil.csv", stringsAsFactors = FALSE)
neil_sp <- unique(neil_list$sp)
paper_heights <- heights[heights$sp %in% neil_sp, ]
paper_heights <- paper_heights[complete.cases(paper_heights), ]
paper_heights <- paper_heights[order(paper_heights$sp), ]
unique(paper_heights$sp) #shows the sp that we have data for
paper_heights <- paper_heights[!paper_heights$sp %in% c("fram", "juni", "qual", "quve") & !paper_heights$dbh == 0, ] #juni, fram, and quve have <10 measurements has only one measure and 0 dbh meant dead
my.formula <- y ~ poly(ln(x))
library(AICcmodavg)
pol <- lmer(height.m ~ poly(ln(dbh),2) + (1|sp), data=paper_heights)
# mix <- lmer(height.m ~ dbh + (1|sp), data=paper_heights)
log <- lmer(ln(height.m) ~ ln(dbh) + (1|sp), data=paper_heights)
library(lme4)
pol <- lmer(height.m ~ poly(ln(dbh),2) + (1|sp), data=paper_heights)
# mix <- lmer(height.m ~ dbh + (1|sp), data=paper_heights)
log <- lmer(ln(height.m) ~ ln(dbh) + (1|sp), data=paper_heights)
aictab(list(pol=pol, mix=mix, log=log), second.ord=TRUE, sort=TRUE)
library(SciViews)
pol <- lmer(height.m ~ poly(ln(dbh),2) + (1|sp), data=paper_heights)
# mix <- lmer(height.m ~ dbh + (1|sp), data=paper_heights)
log <- lmer(ln(height.m) ~ ln(dbh) + (1|sp), data=paper_heights)
a
aictab(list(pol=pol, mix=mix, log=log), second.ord=TRUE, sort=TRUE)
aictab(list(pol=pol, log=log), second.ord=TRUE, sort=TRUE)
library(ggplot2)
library(ggpmisc)
my.formula <- y ~ poly(ln(x))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = height.m) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = height.m) +
geom_smooth(method = "poly", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
?geom_smooth
my.formula <- ln(y) ~ ln(x)
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
?geom_smooth
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_smooth(method = "auto", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
geom_point(color = "#0c4c8a") +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method = "auto", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method = "auto", color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), group=group) +
geom_point(color = "#0c4c8a") +
geom_smooth(method = "auto", color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), group=sp) +
geom_point(color = "#0c4c8a") +
geom_smooth(method = "auto", color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method = "auto", se=FALSE, color="black", formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(se=FALSE, color="black") +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
#equations for individual sp
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
?stat_poly_eq
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_text(x = 25, y = 300, label = lm_eqn(paper_heights), parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
lm_eqn <- function(df){
m <- lm(ln(height.m) ~ ln(dbh), paper_heights);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_text(x = 25, y = 300, label = lm_eqn(paper_heights), parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
lm_eqn <- function(df){
m <- lm(ln(height.m) ~ ln(dbh), df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_text(x = 25, y = 300, label = lm_eqn(paper_heights), parse = TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
lm_eqn(paper_heights)
lm_eqn <- function(df){
m <- lm(ln(height.m) ~ ln(dbh), df);
eq <- substitute(italic(ln(height.m)) == a + b %.% italic(ln(dbh))*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
lm_eqn(paper_heights)
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m)) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
geom_text(x = 25, y = 300, label = lm_eqn(paper_heights), parse = TRUE) +
facet_wrap(vars(sp))
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(ln(height.m)) == a + b %.% italic(ln(dbh))*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
m <- lm(y ~ x, df);
df=paper_heights
m <- lm(y ~ x, df);
x=ln(dbh)
x <- "ln(dbh)"
y <- "ln(height.m)"
m <- lm(y ~ x, df);
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
facet_wrap(vars(sp))
library(devtools)
source_gist("524eade46135f6348140")
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=-1,parse=TRUE) +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0, vjust=1,parse=TRUE) +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0, vjust=-1,parse=TRUE) +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0, vjust=-1,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.5, vjust=-2,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.25, vjust=-1.5,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.15, vjust=-1.5,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.1, vjust=-1.5,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.12, vjust=-1.5,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.13, vjust=-1.5,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1.5,parse=TRUE) +
theme_minimal() +
facet_wrap(vars(sp))
ggplot(data = paper_heights) +
aes(x = ln(dbh), y = ln(height.m), label = y) +
geom_point(color = "#0c4c8a") +
geom_smooth(method="lm", se=FALSE, color="black") +
stat_smooth_func(geom="text",method="lm",hjust=0.16, vjust=-1.5,parse=TRUE) +
theme_minimal()
aictab(list(pol=pol), second.ord=TRUE, sort=TRUE)
aictab(list(log=log), second.ord=TRUE, sort=TRUE)
anova(pol)
anova(log)
?stat_smooth_func
