ForC_measurements <- read.csv("E:/Github_SCBI/ForC/data/ForC_measurements.csv")
View(ForC_measurements)
meas <- ForC_measurements
rm(ForC_measurements)
View(meas)
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$citation.ID <- gsub("NAC", NA, proto$citation.ID)
simple <- proto[!is.na(proto$citation.ID),] #now this contains only the citation.ID that are not NA
##these are the strings containing special characters
matches_citation <- unique (grep(paste(specials,collapse="|"),
simple$citation.ID, value=TRUE))
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
#1 find out occurrences in the columns ####
##this one tells you which special characters are present
##symbols has the special characters found within the strings from matches_sites.
##All of these are standard 'error' web codes for accented letters. Often times you will see these on Google search returns, for example.
##These were determined from searching these into Google, and are saved separately as a text doc in Windows 12252 encoding (UTF-8 will corrupt it).
symbol <- c( 'ÃƒÂ¡', 'ÃƒÂ¤', 'ÃƒÂ£', 'ÃŒÆ’', 'Ã©', 'Ã…Â½',  'ÃƒÂ¸', 'ÃƒÂ¸', 'Ã¶', 'ÃƒÂ¶', 'ÃƒÂ³', 'Ã…â€˜', 'ÃƒÂ¼', 'ÃƒÂº', 'ÃƒÅ¸', 'ÃƒÂ§', 'Ã…Â¾', 'Ã¢â‚¬â€œ', 'Ã¢â‚¬â„¢','ÃƒÂ[[:space:]]', 'ÃƒÂ', 'Ã…Â', 'Ã–', 'Ã¤')
equiv <- c('a', 'a', 'a', 'a', 'e', 'e', 'oe', 'oe', 'oe', 'oe', 'o', 'o', 'u','u','s','c','z', '-','\'', 'a', 'i', 'a', 'O', 'a')
##these are the strings containing special characters
matches_citation <- unique (grep(paste(specials,collapse="|"),
simple$citation.ID, value=TRUE))
##subset the simple df and run the loop to make sure substitution works. Then apply to meas.
simple <- simple[simple$citation.ID %in% matches_citation, ]
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$plot.name <- gsub("NAC", NA, proto$plot.name)
simple <- proto[!is.na(proto$plot.name), ]
matches_plots <- unique (grep(paste(specials,collapse="|"),
simple$plot.name, value=TRUE))
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$sites.sitename <- gsub("NAC", NA, proto$sites.sitename)
simple <- proto[!is.na(proto$sites.sitename),]
matches_sites <- unique (grep(paste(specials,collapse="|"),
simple$sites.sitename, value=TRUE))
ForC_cite <- read.csv("E:/Github_SCBI/ForC/data/ForC_citations.csv")
View(ForC_cite)
meas <- ForC_cite
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ', '\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
#2 below is the separate work-through for each column. The for-loop massively simplifies this ####
#2a citation.ID ####
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$citation.author <- gsub("NAC", NA, proto$citation.author)
simple <- proto[!is.na(proto$citation.author),]
matches_author <- unique (grep(paste(specials,collapse="|"),
simple$citation.author, value=TRUE))
matches
matches_author
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
matches_author <- unique (grep(paste(specials,collapse="|"),
simple$citation.author, value=TRUE))
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ', '\!', '\"', '\#', '\$', '\%', '\&', '\â', '\*', '\+', '\/', '\<', '\=', '\>', '\?', '\@', '\[',  '\]', '\^', '\`', '\{', '\|', '\}', '\~')
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ', '\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
matches_author <- unique (grep(paste(specials,collapse="|"),
simple$citation.author, value=TRUE))
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
#2 below is the separate work-through for each column. The for-loop massively simplifies this ####
#2a citation.ID ####
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$citation.title <- gsub("NAC", NA, proto$citation.title)
simple <- proto[!is.na(proto$citation.title),]
matches_citation <- unique (grep(paste(specials,collapse="|"),
simple$citation.title, value=TRUE))
matches_title <- unique (grep(paste(specials,collapse="|"),
simple$citation.title, value=TRUE))
punct <- c('\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
matches_title <- unique (grep(paste(punct,collapse="|"),
simple$citation.title, value=TRUE))
matches_title
"\&" %in% simple$citation.title
"\\&" %in% simple$citation.title
matches_title <- unique (grep(paste(specials,collapse="|"),
simple$citation.title, value=TRUE))
matches_title <- unique (grep(paste(punct,collapse="|"),
simple$citation.title, value=TRUE))
install.packages("reprex")
library(reprex)
?reprex
unwanted_array = c('ÃƒÂ¡'='a', 'ÃƒÂ¤'='a', 'ÃƒÂ£'='a', 'ÃŒÆ’'='a', 'Ã©'='e', 'Ã…Â½'='e',  'ÃƒÂ¸'='oe', 'ÃƒÂ¸'='oe', 'Ã¶'='oe', 'ÃƒÂ¶'='oe', 'ÃƒÂ³'='o', 'Ã…â€˜'='o', 'ÃƒÂ¼'='u', 'ÃƒÂº'='u', 'ÃƒÅ¸'='s', 'ÃƒÂ§'='c', 'Ã…Â¾'='z', 'Ã¢â‚¬â€œ'='-', 'Ã¢â‚¬â„¢'='\'','ÃƒÂ[[:space:]]'='a', 'ÃƒÂ'='i', 'Ã…Â'='a', 'Ã–'='O', 'Ã¤'='a',
'Š'='S', 'š'='s', 'Ž'='Z', 'ž'='z', 'À'='A', 'Á'='A', 'Â'='A', 'Ã'='A', 'Ä'='A', 'Å'='A', 'Æ'='A', 'Ç'='C', 'È'='E', 'É'='E','Ê'='E', 'Ë'='E', 'Ì'='I', 'Í'='I', 'Î'='I', 'Ï'='I', 'Ñ'='N', 'Ò'='O', 'Ó'='O', 'Ô'='O', 'Õ'='O', 'Ö'='O', 'Ø'='O', 'Ù'='U','Ú'='U', 'Û'='U', 'Ü'='U', 'Ý'='Y', 'Þ'='B', 'ß'='Ss', 'à'='a', 'á'='a', 'â'='a', 'ã'='a', 'ä'='a', 'å'='a', 'æ'='a', 'ç'='c','è'='e', 'é'='e', 'ê'='e', 'ë'='e', 'ì'='i', 'í'='i', 'î'='i', 'ï'='i', 'ð'='o', 'ñ'='n', 'ò'='o', 'ó'='o', 'ô'='o', 'õ'='o','ö'='o', 'ø'='o', 'ù'='u', 'ú'='u', 'û'='u', 'ü'='u', 'ý'='y', 'ý'='y', 'þ'='b', 'ÿ'='y')
# Test vector of words with bad characters
s <- c("San JosÃ©_2008_dghe", "Ã–quist_2016_ashge", "MÃ¤kiranta_2006_sdhe", "SanaÂ_2012_fghef")
s_split <- strsplit(s, "")  # split each word into characters
unlist(lapply(s_split, function(w) {
matches <- which(w %in% names(unwanted_array)) # find problem letters
w[matches] <- unwanted_array[w[matches]] # replace 'em
paste(w, collapse = "") # reassemble letters to word
}))
ForC_cite <- read.csv("E:/Github_SCBI/ForC/data/ForC_citations.csv")
View(ForC_cite)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
punct <- c('\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
proto <- ForC_cite
matches_authors <- unique (grep(paste(specials,collapse="|"),
proto$citation.author, value=TRUE))
matches_title <- unique (grep(paste(specials,collapse="|"),
proto$citation.title, value=TRUE))
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.title, value=TRUE))
"\\&" %in% proto$citation.title
"\&" %in% proto$citation.title
punct %in% proto$citation.title
specials %in% proto$citation.title
specials %in% proto$citation.author
punct %in% proto$citation.author
matches_title
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.title, value=TRUE))
punct %in% proto$citation.title
"\\&" %in% proto$citation.title
"\&" %in% proto$citation.title
punct[1] %in% proto$citation.title
str(proto)
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.author, value=TRUE))
proto$citation.title <- as.character(proto$citation.title)
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.title, value=TRUE))
punct %in% as.character(proto$citation.author)
test <- c('&', ".", '$', "#")
punct %in% as.character(test)
matches_title <- unique (grep(paste(test,collapse="|"),
proto$citation.title, value=TRUE))
punct %in% test
grep(punct, test)
paste0(test)
paste0(test, collapse = T)
paste0(test, collapse = |)
paste0(test, collapse = )
paste0(test, collapse = "")
grep(paste0(punct, collapse = ""), paste0(test, collapse = ""))
setwd("E:/Github_SCBI/Dendrobands/data")
#2010 not included because only one measurement
dirs <- dir("E:/Github_SCBI/Dendrobands/data", pattern="_201[1-9]*.csv")
library(data.table)
date <- c(2011:2018)
filename <- paste(date, "range", sep="_")
all_sp <- list()
all_files <- list()
#this nested for-loop first makes a list of each species' average growth (max-min) in a year. Then, it combines all the years into one list (all_files).
for (j in seq(along=dirs)){
year <- read.csv(dirs[[j]])
year$sp <- as.character(year$sp)
sp <- c(unique(year$sp))
for (i in seq(along=sp)){
spec <- sp[[i]]
name <- paste0(spec, "data")
sprange <- paste(sp[[i]], "range", sep="_")
name <- subset(year, sp %in% spec)
name <- name[ ,c("tag", "stemtag", "sp", "measure", "codes")]
#get range (max-min) of measurements by tag
sprange <- aggregate(name[, c("measure")], list(name$tag, name$stemtag, name$sp), FUN = function(i)max(i) - min(i))
colnames(sprange) <- c("tag", "stemtag", "sp", "growth")
#remove NA and values over 50 (would indicate band replacement)
sprange <- subset(sprange, !is.na(sprange$growth) & sprange$growth <= 50)
#take the average of the ranges
sprange <- if (nrow(sprange)>=2){
aggregate(sprange[, c("growth")], list(sprange$sp), mean)
}
else {
sprange[ ,c("sp", "growth")]
}
colnames(sprange) <- c("sp", paste0("avg_growth",date[j],"_mm"))
all_sp[[i]] <- sprange
}
all_files[[j]] <- all_sp
}
#now, coerce the list of lists into a usable dataframe
step1 <- lapply(all_files, rbindlist)
library(tidyverse)
step2 <- reduce(step1, merge, by = "sp", all=TRUE)
#round to 2nd decimal
step2[ ,c(2:9)] <- round(step2[ ,c(2:9)], digits=2)
#find range of years
step2$mingrowth_mm <- apply(step2[, 2:9], 1, min, na.rm=TRUE)
step2$maxgrowth_mm <- apply(step2[, 2:9], 1, max, na.rm=TRUE)
step2$avg_growth_range_mm <- step2[, "maxgrowth_mm"] - step2[, "mingrowth_mm"]
install.packages("dichromat")
library(colorspace)
pal <- choose_palette()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(
values = pal,
aesthetics = c("colour", "fill")) +
theme_light()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_fill_manual(values = pal) +
theme_light()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pal) +
theme_light()
ggplot(data = step2, aes(x = mingrowth_mm, y = maxgrowth_mm)) +
geom_point(aes(color=sp)) +
theme_light()
ggplot(data = step2, aes(x = mingrowth_mm, y = maxgrowth_mm)) +
geom_point(aes(color=sp)) +
scale_fill_manual(values = setNames(c(gg_color_hue(length(unique(step2$sp)))))) +
theme_light()
?setNames
ggplot(data = step2, aes(x = mingrowth_mm, y = maxgrowth_mm)) +
geom_point(aes(color=sp)) +
scale_fill_manual(values = setNames(c(gg_color_hue(length(unique(step2$sp)))), "green")) +
theme_light()
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
ggplot(data = step2, aes(x = mingrowth_mm, y = maxgrowth_mm)) +
geom_point(aes(color=sp)) +
scale_fill_manual(values = setNames(c(gg_color_hue(length(unique(step2$sp)))), "green")) +
theme_light()
?colorRamp
colorRamp::primarycolors
colorRamps::primarycolors
install.packages("colorRamp")
install.packages("colorRamps")
colorRamps::primarycolors
library(colorRamps)
colorRamps::primarycolors
?colorRamps
table.ramp(23)
rgb.tables(23)
pallette <- rgb.tables(23)
ggplot(data = step2, aes(x = mingrowth_mm, y = maxgrowth_mm)) +
geom_point(aes(color=sp)) +
scale_fill_manual(values=pallette) +
theme_light()
?RcolorBrewer
?RColorBrewer
library(RColorBrewer)
?RColorBrewer
pallette = brewer.pal(9, "Set1")
pallette = colorRampPalette(pallette)(23)
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_light()
?scale_size_discrete
esquisse:::esquisser()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_economist_white()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_economistwhite()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_economist.white()
esquisse:::esquisser()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_economist_white()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(RColorBrewer)
pallette = brewer.pal(9, "Set1")
pallette = colorRampPalette(pallette)(23)
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_economist_white()
?ggplot
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_grey()
pallette = brewer.pal(11, "Spectral")
pallette = colorRampPalette(pallette)(23)
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_grey()
pallette = brewer.pal(9, "Set1")
pallette = colorRampPalette(pallette)(23)
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
theme_grey()
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
labs(title="Avg Growth by Species", x="Minimum growth (mm)", y="Maximum growth (mm)") +
theme_grey()
esquisse:::esquisser()
setwd("E:/Github_SCBI/Dendrobands/results")
pdf("mean_growth_by_species.pdf", width=12)
#this graph shows the average range of growth per species. The lower numbers means the avg max and avg min are closer together. Almost all species are under 10mm, which means on average each species grows less than 1cm per growing season (1 cm according to dendroband measurements).
ggplot(data = step2) +
aes(x = sp, weight = avg_growth_range_mm) +
geom_bar(fill = "#0c4c8a") +
labs(title="Avg (Dendroband) Growth Range by Species", x="Species", y="Growth (mm)")
theme_minimal()
#the following graph breaks the first one apart and plots the max by the min. It reveals a good fit relationship between the two, suggesting that most species follow a similar average pattern.
pallette = brewer.pal(9, "Set1")
pallette = colorRampPalette(pallette)(23)
ggplot(data = step2) +
geom_point(aes(x = mingrowth_mm, y = maxgrowth_mm, color=sp)) +
scale_colour_manual(values = pallette) +
labs(title="Avg (Dendroband) Growth by Species", x="Minimum growth (mm)", y="Maximum growth (mm)") +
theme_grey()
dev.off()
