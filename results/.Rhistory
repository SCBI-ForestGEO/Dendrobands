dendro12 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2012/scbi.dendroAll_2012.csv")
View(dendro12)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
View(dendro_trees)
dendro11 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2011/scbi.dendroAll_2011.csv")
View(dendro11)
dendro12$treeID <- dendro_trees$treeID[match(dendro12$tag, dendro_trees$tag)]
dendro12$stemID <- dendro_trees$stemID[match(dendro12$tag, dendro_trees$tag)]
dendro12$stemID <- dendro_trees$stemID[match(dendro12$tag&dendro12$stemtag, dendro_trees$tag&dendro_trees$stemtag)]
dendro12$dbh <- dendro11$dbh[match(dendro12$tag, dendro11$tag)]
getwd()
write.csv(dendro12, "scbi.dendroAll_2012.csv", row.names=FALSE)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012")
file_list <- list.files("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012", pattern="data_entry_intraannual")
# for intraannual
for (i in seq(along=file_list)){
filename = file_list[[i]]
data_2012 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/scbi.dendroAll_2012.csv")
data_intra <- read.csv(filename)
names2012 <- c(colnames(data_2012))
namesintra <- c(colnames(data_intra))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2011, namesintra)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_intra[missing] <- NA
data_intra$area <- NULL #this column is only relevant for field
data_intra$location <- NULL #only for when merging data pre-2018
test <- rbind(data_2012, data_intra)
test <- test[order(test[,"tag"], test[,"survey.ID"]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("D", "DS", "DC", "DN", "DT")
test$status <- as.character(test$status)
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead",
ifelse((is.na(test$status)), na.locf(test$status), test$status))
test$codes <- as.character(test$codes)
test$codes <- ifelse(is.na(test$codes), "", test$codes)
test$notes <- as.character(test$notes)
test$notes <- ifelse(is.na(test$notes), "", test$notes)
write.csv(test, "scbi.dendroAll_2012.csv", row.names=FALSE)
}
# for intraannual
for (i in seq(along=file_list)){
filename = file_list[[i]]
data_2012 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/scbi.dendroAll_2012.csv")
data_intra <- read.csv(filename)
names2012 <- c(colnames(data_2012))
namesintra <- c(colnames(data_intra))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2012, namesintra)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_intra[missing] <- NA
data_intra$area <- NULL #this column is only relevant for field
data_intra$location <- NULL #only for when merging data pre-2018
test <- rbind(data_2012, data_intra)
test <- test[order(test[,"tag"], test[,"survey.ID"]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("D", "DS", "DC", "DN", "DT")
test$status <- as.character(test$status)
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead",
ifelse((is.na(test$status)), na.locf(test$status), test$status))
test$codes <- as.character(test$codes)
test$codes <- ifelse(is.na(test$codes), "", test$codes)
test$notes <- as.character(test$notes)
test$notes <- ifelse(is.na(test$notes), "", test$notes)
write.csv(test, "scbi.dendroAll_2012.csv", row.names=FALSE)
}
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012")
file_list <- list.files("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012", pattern="data_entry_intraannual")
# for intraannual
for (i in seq(along=file_list)){
filename = file_list[[i]]
data_2012 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/scbi.dendroAll_2012.csv")
data_intra <- read.csv(filename)
names2012 <- c(colnames(data_2012))
namesintra <- c(colnames(data_intra))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2012, namesintra)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_intra[missing] <- NA
data_intra$area <- NULL #this column is only relevant for field
data_intra$location <- NULL #only for when merging data pre-2018
test <- rbind(data_2012, data_intra)
test <- test[order(test[,"tag"], test[,"survey.ID"]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("D", "DS", "DC", "DN", "DT")
test$status <- as.character(test$status)
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead",
ifelse((is.na(test$status)), na.locf(test$status), test$status))
test$codes <- as.character(test$codes)
test$codes <- ifelse(is.na(test$codes), "", test$codes)
test$notes <- as.character(test$notes)
test$notes <- ifelse(is.na(test$notes), "", test$notes)
write.csv(test, "scbi.dendroAll_2012.csv", row.names=FALSE)
}
View(test)
## for first intraannual survey
test$intraannual <- ifelse(!(test$survey.ID %in% c("2012.01","2012.18")), "1", "0")
write.csv(test, "scbi.dendroAll_2012.csv", row.names=FALSE)
# for biannual
#####
# for last biannual survey
data_2012 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/scbi.dendroAll_2012.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/data_entry_biannual_2012-18.csv")
names2012 <- c(colnames(data_2012))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2017 but not in data_biannual
missing <- setdiff(names2012, namesbi)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
data_biannual$location <- NULL
test <- rbind(data_2011, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test <- rbind(data_2012, data_biannual)
View(test)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
View(test)
data_2012 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/scbi.dendroAll_2012.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/data_entry_biannual_2012-18.csv")
names2012 <- c(colnames(data_2012))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2017 but not in data_biannual
missing <- setdiff(names2012, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2017)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
data_biannual$location <- NULL
test <- rbind(data_2012, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
#test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("D", "DS", "DC", "DN", "DT")
test$status <- as.character(test$status)
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead",
ifelse((is.na(test$status)), na.locf(test$status), test$status))
test$codes <- as.character(test$codes)
test$codes <- ifelse(is.na(test$codes), "", test$codes)
test$notes <- as.character(test$notes)
test$notes <- ifelse(is.na(test$notes), "", test$notes)
View(data_biannual)
View(data_2012)
# for biannual
#####
# for last biannual survey
data_2012 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/scbi.dendroAll_2012.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/2012/data_entry_biannual_2012-18.csv")
names2012 <- c(colnames(data_2012))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2017 but not in data_biannual
missing <- setdiff(names2012, namesbi)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
data_biannual$location <- NULL
test <- rbind(data_2012, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
View(test)
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
#test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("D", "DS", "DC", "DN", "DT")
test$status <- as.character(test$status)
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead",
ifelse((is.na(test$status)), na.locf(test$status), test$status))
test$codes <- as.character(test$codes)
test$codes <- ifelse(is.na(test$codes), "", test$codes)
test$notes <- as.character(test$notes)
test$notes <- ifelse(is.na(test$notes), "", test$notes)
## for fixing intraannual qualifier (do after last biannual merge)
test$intraannual <- ifelse(!(test$survey.ID %in% c("2012.01","2012.18")), "1", "0")
test$dendroID <- na.locf(test$dendroID)
write.csv(test, "scbi.dendroAll_2011.csv", row.names=FALSE)
write.csv(test, "scbi.dendroAll_2012.csv", row.names=FALSE)
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/results")
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
dendro <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/results/dendro_trees_dbhcount2018.csv")
ANPP <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/summary_data/ANPP_total_and_by_species.csv")
data_dbh<-data_2018[which(data_2018$survey.ID=='2018.14'), ]
library(data.table)
library(ggplot2)
## plot ANPP contribution (>10cm) by dendroband sp numbers
ANPPmerge <- data.frame(ANPP$species, ANPP$ANPP_Mg.C.ha1.y1_10cm)
setnames(ANPPmerge, old="ANPP.species", new="sp")
ANPPmerge <- merge(ANPPmerge,dendro, by="sp")
ggplot(data = ANPPmerge) +
aes(x = sp, fill = ANPP.ANPP_Mg.C.ha1.y1_10cm, weight = biannual.n) +
geom_bar() +
scale_fill_gradientn(colours=c("black", "orange", "green", "blue", "purple", "yellow", "red", "#990000"),
values=c(0,0.31,1.3), guide="colourbar",
name="ANPP in MgC/ha/yr Stems>10cm",
limits=c(0,1.3), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.31,1.3),
labels=c(0,0.05,0.1,0.15,0.2,0.25,0.31,1.3)) +
guides(fill=guide_colourbar(barheight=15, direction="vertical", title.position="top")) +
labs(title = "Dendroband sp numbers by ANPP >10cm 2018") +
theme_minimal()
library(esquisse)
esquisse:::esquisser()
## basic distribution of dbh size classes
hist(data_dbh$dbh,
main="Histogram of Dendroband DBH 2018",
xlab="DBH (mm)",
border="blue",
col="grey",
las=1,
breaks=15)
library(sp)
library(maptools)
library(rgdal)
library(mapview)
setwd()
ForC_sites <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/ForC/data/ForC_sites.csv")
coordinates(ForC_sites)<- c("lon", "lat")
BNG<- CRS("+init=epsg:4326") #reference from http://spatialreference.org/ref/epsg/4326/
p4s <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
proj4string(ForC_sites)<-BNG
ForC_wgs84<- spTransform(ForC_sites, CRS=p4s)
mapview(ForC_wgs84, label=ForC_sites$sites.sitename)
#we can use the basic open Esri.WorldImagery behind this and it works. Other maps can be obtained below.
#with mapview it is easy to change symbology, add legends, etc. This can be an option for the future.
library(ggmap)
get_map(source="google", maptype="hybrid")
