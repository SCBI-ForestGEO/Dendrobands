for (i in names(surveys)){
filename <- surveys[[i]]
ifelse(filename$dbh>0),
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
for (i in names(surveys)){
filename <- surveys[[i]]
ifelse(filename$dbh>0,
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0,
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
View(dead)
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0,
dead$filename <- filename$dbh[match(dead$stemID, filename$stemID)], "")
}
View(dead)
View(surveys)
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0 & is.na(filename$dbh),
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
View(dead)
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
dead$dbh.when.die <- ifelse(filename$dbh>0 & is.na(filename$dbh), filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
View(surveys)
filename
files
names(surveys)
filename
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
dead$dbh.when.die <- ifelse(filename$dbh>0 & is.na(filename$dbh), filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
dead$dbh.when.die <- ifelse(filename$dbh>0 | is.na(filename$dbh), filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0 | is.na(filename$dbh),
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
}
View(dead)
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0 | is.na(filename$dbh),
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
dbh_[[i]] <- c(filename$dbh)
}
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0 | is.na(filename$dbh),
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
paste0("dbh", [[i]]) <- c(filename$dbh)
}
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0 | is.na(filename$dbh),
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
paste0("dbh", i) <- c(filename$dbh)
}
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
ifelse(filename$dbh>0 | is.na(filename$dbh),
dead$dbh.when.die <- filename$dbh[match(dead$stemID, filename$stemID)], dead$dbh.when.die)
i <- c(filename$dbh)
}
i
View(surveys)
head(dead$stemID)
head(filename$stemID)
look.up.dbh <- filename$dbh[match(dead$stemID, filename$stemID)] # double check thatthis is the right order
u
look.up.dbh
length(look.up.dbh)
length( dead$dbh.when.die )
look.up.dbh <- filename$dbh[match(dead$stemID, filename$stemID)] # double check thatthis is the right order
ifelse(look.up.dbh>0 & !(is.na(look.up.dbh)), look.up.dbh
, dead$dbh.when.die)
for (i in names(surveys)){
filename <- surveys[[i]]
filename$dbh <- as.numeric(filename$dbh)
look.up.dbh <- filename$dbh[match(dead$stemID, filename$stemID)] # double check thatthis is the right order
dead$dbh.when.die <- ifelse(look.up.dbh>0 & !(is.na(look.up.dbh)), look.up.dbh
, dead$dbh.when.die)
}
View(dead)
View(dendrofull)
dead$dbhdead <- ifelse(dendrofull$dbh2008>0 & !(is.na(dendrofull$dbh2008)), dendrofull$dbh2008[match(dead$stemID, dendrofull$stemID)], dead$dbh.when.die)
ifelse(dendrofull$dbh2008>0 & !(is.na(dendrofull$dbh2008)), dead$dbhdead <- dendrofull$dbh2008[match(dead$stemID, dendrofull$stemID)], dead$dbh.when.die)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro18 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2018.csv")
dendrofull <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv")
##list to fix
replace <- dendro18[grep("RD", dendro18$codes), ]
##list to replace
dead <- dendro_trees[which(!(is.na(dendro_trees$mortality.year))), ]
temp <- list.files("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data", pattern="scbi")
surveys <- lapply(temp, read.csv)
files <- gsub(".csv", "", temp)
names(surveys) <- files
View(dead)
ifelse(dendrofull$dbh2008>0 & !(is.na(dendrofull$dbh2008)), dead$dbhdead <- dendrofull$dbh2008[match(dead$stemID, dendrofull$stemID)], dead$dbhdead)
ifelse(dendrofull$dbh2013>0 & !(is.na(dendrofull$dbh2013)), dead$dbhdead <- dendrofull$dbh2013[match(dead$stemID, dendrofull$stemID)], dead$dbhdead)
ifelse(dendrofull$dbh2018>0 & !(is.na(dendrofull$dbh2018)), dead$dbhdead <- dendrofull$dbh2018[match(dead$stemID, dendrofull$stemID)], dead$dbhdead)
ifelse(dendrofull$dbh2008>0 & !(is.na(dendrofull$dbh2008)), dead$dbhdead <- dendrofull$dbh2008[match(dead$stemID, dendrofull$stemID)], dead$dbhdead)
dendrofull$dbhall <- max(c(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018))
View(dendrofull)
dendrofull$dbhall <- max(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
View(dendrofull)
?pmax
dendrofull$dbhall <- pmax(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
View(dendrofull)
dead$dbhdead <- dendrofull$dbhall[match(dead$stemID, dendrofull$stemID)]
View(dead)
dead <- dead[, c(1:7,22,8:21)]
View(dead)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro18 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2018.csv")
dendrofull <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv")
##list to fix
replace <- dendro18[grep("RD", dendro18$codes), ]
##list to replace
dead <- dendro_trees[which(!(is.na(dendro_trees$mortality.year))), ]
dendrofull$dbhall <- pmax(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
dead$dbhdead <- dendrofull$dbhall[match(dead$stemID, dendrofull$stemID)]
dead <- dead[, c(1:7,22,8:21)]
View(dead)
View(dendrofull)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro18 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2018.csv")
dendrofull <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv")
##list to fix
replace <- dendro18[grep("RD", dendro18$codes), ]
##list to replace
dead <- dendro_trees[which(!(is.na(dendro_trees$mortality.year))), ]
dendrofull$dbhall <- pmax(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
dead$dbhdead <- dendrofull$dbhall[match(dead$stemID, dendrofull$stemID)]
dead <- dead[, c(1:7,22,8:21)]
View(dead)
View(dendrofull)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro18 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2018.csv")
dendrofull <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv")
##list to fix
replace <- dendro18[grep("RD", dendro18$codes), ]
##list to replace
dead <- dendro_trees[which(!(is.na(dendro_trees$mortality.year))), ]
dendrofull$dbhall <- pmax(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
dead$dbhdead <- dendrofull$dbhall[match(dead$stemID, dendrofull$stemID)]
dead <- dead[, c(1:7,22,8:21)]
View(dead)
getwd()
write.csv(dead, "dead_to_replace.csv", row.names=FALSE)
View(dendrofull)
cores <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/climate_sensitivity_cores/data/census_data_for_cored_trees.csv")
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
library(data.table)
setnames(cores, old=c("StemTag"), new=c("stemtag"))
setnames(dendro_trees, old=c("mortality.year"), new=c("status"))
library(tidyr)
dendro_trees$status <- ifelse(dendro_trees$status=="[:digit:]", "A", "D") #this ifelse code is backwards from what it should be but for some reason it's producing the right output.
dendro_trees$status <- replace_na(dendro_trees$status, "A")
dendro_trees$year.cored <-cores$year.cored[match(dendro_trees$tag,cores$tag)]
dendro_merge <- merge(dendro_trees, cores, by=c("tag", "stemtag", "sp", "quadrat", "treeID", "stemID", "status", "gx", "gy","year.cored"), all.x=TRUE, all.y=TRUE)
dendro_all <- dendro_merge[c(1:13,17:22)]
##order the data and remove the crossovers (btwn biannual and cored) that don't have biannual marked already
dendro_all <- dendro_all[order(dendro_all$tag,dendro_all$biannual),]
dendro_all$stemID[is.na(dendro_all$stemID)] <- 0
##WARNING:assign stemID values for 30365 and 131352 (discrepancy with 2013 census). THIS PART SHOULD BE DELETED once the 2018 census data includes these tags with the appropriate info.
dendro_all[91,6]=11
dendro_all[867,6]=12
dendro_all<-dendro_all[!duplicated(dendro_all$stemID),]
##populate with geographic coordinates
latlon <- read.csv("V:/SIGEO/GIS_data/dendroband surveys/Merged_dendroband_utm_lat_lon.csv")
dendro_all$NAD83_X <- latlon$NAD83_X[match(dendro_all$stemID, latlon$stemID)]
dendro_all$NAD83_Y <- latlon$NAD83_Y[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lat <- latlon$lat[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lon <- latlon$lon[match(dendro_all$stemID, latlon$stemID)]
##populate with lx, ly, and status (once ForestGEO 2018 census data is added, use that for base status)
census_2013 <- read.csv("V:/SIGEO/3-RECENSUS 2013/DATA/FINAL DATA to use, to share/scbi.stem2.csv")
field2013<- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/census3_coord_local_plot.csv")
#this .txt file was downloaded straight from CTFS at toward the end of data entry for the 3rd census Nov. 2018.
setnames(field2013, old="qx", new="lx")
setnames(field2013, old="qy", new="ly")
dendro_all$lx <- field2013$lx[match(dendro_all$stemID, field2013$stemid)]
dendro_all$ly <- field2013$ly[match(dendro_all$stemID, field2013$stemid)]
##can also do this another way from the census field forms. Not as accurate since you're matching by tag as opposed to stemID
#library(openxlsx)
#field2013 <- read.xlsx("V:/SIGEO/2-RECENSUS 2018/DATA/Forms to PRINT/QUADRAT_to_print.xlsx", sheet="QUAD_to_print", startRow=6)
#dendro_all$lx <- field2013$lx[match(dendro_all$tag, field2013$tag)]
#dendro_all$ly <- field2013$ly[match(dendro_all$tag, field2013$tag)]
##update status from most recent mortality data (this will update only some of the trees, hence why the census data is used first)
mortality_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data_private/SCBI_mortality/raw data/Mortality_Survey_2018.csv")
dendro_all$status <- mortality_2018$new.status[match(dendro_all$tag, mortality_2018$tag)]
missing <- ifelse(is.na(dendro_all$status), dendro_all$tag, "")
missingdf <- dendro_all[!complete.cases(dendro_all$status),]
missingdf <- missingdf[c(1:2)]
setnames(census_2013, old=c("StemTag"), new=c("stemtag"))
dendro_test <- merge(missingdf, census_2013[,c("tag", "stemtag","status")], by=c("tag","stemtag"))
dendro_all <- merge(dendro_all, dendro_test, by="tag", all.x=TRUE)
setnames(dendro_all, old="stemtag.x", new="stemtag")
library(tidyr)
dendro_all <- unite(dendro_all, status, status.x, status.y)
dendro_all$status <- gsub("_NA", "", dendro_all$status)
dendro_all$status <- gsub("NA_", "", dendro_all$status)
dendro_all$status <- gsub("PD", "D", dendro_all$status)
dendro_all$status <- gsub("DS", "D", dendro_all$status)
dendro_all$status <- gsub("DC", "D", dendro_all$status)
dendro_all$status <- gsub("AU", "A", dendro_all$status)
##get rid of NA
dendro_all$biannual[is.na(dendro_all$biannual)] <- 0
dendro_all$intraannual[is.na(dendro_all$intraannual)] <- 0
dendro_all$cored[is.na(dendro_all$cored)] <- 1
census_2008 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem1.csv")
dendro_all$dbh2008 <- census_2008$dbh[match(dendro_all$stemID, census_2008$stemID)]
dendro_all$dbh2013 <- census_2013$dbh[match(dendro_all$stemID, census_2013$stemID)]
View(dendro_all)
##re-order
dendro_all <- dendro_all[c(1:6,21:22,11:13,10,7,14:15,8:9,16:19)]
View(dendro_test)
cores <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/climate_sensitivity_cores/data/census_data_for_cored_trees.csv")
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
library(data.table)
setnames(cores, old=c("StemTag"), new=c("stemtag"))
setnames(dendro_trees, old=c("mortality.year"), new=c("status"))
library(tidyr)
dendro_trees$status <- ifelse(dendro_trees$status=="[:digit:]", "A", "D") #this ifelse code is backwards from what it should be but for some reason it's producing the right output.
dendro_trees$status <- replace_na(dendro_trees$status, "A")
View(dendro_trees)
cores <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/climate_sensitivity_cores/data/census_data_for_cored_trees.csv")
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
library(data.table)
setnames(cores, old=c("StemTag"), new=c("stemtag"))
setnames(dendro_trees, old=c("mortality.year"), new=c("status"))
library(tidyr)
dendro_trees$status <- ifelse(dendro_trees$status=="[:digit:]", "A", "D") #this ifelse code is backwards from what it should be but for some reason it's producing the right output.
dendro_trees$status <- replace_na(dendro_trees$status, "A")
dendro_trees$year.cored <-cores$year.cored[match(dendro_trees$tag,cores$tag)]
dendro_merge <- merge(dendro_trees, cores, by=c("tag", "stemtag", "sp", "quadrat", "treeID", "stemID", "status", "gx", "gy","year.cored"), all.x=TRUE, all.y=TRUE)
dendro_all <- dendro_merge[c(1:13,17:22)]
##order the data and remove the crossovers (btwn biannual and cored) that don't have biannual marked already
dendro_all <- dendro_all[order(dendro_all$tag,dendro_all$biannual),]
dendro_all$stemID[is.na(dendro_all$stemID)] <- 0
##WARNING:assign stemID values for 30365 and 131352 (discrepancy with 2013 census). THIS PART SHOULD BE DELETED once the 2018 census data includes these tags with the appropriate info.
dendro_all[91,6]=11
dendro_all[867,6]=12
dendro_all<-dendro_all[!duplicated(dendro_all$stemID),]
##populate with geographic coordinates
latlon <- read.csv("V:/SIGEO/GIS_data/dendroband surveys/Merged_dendroband_utm_lat_lon.csv")
dendro_all$NAD83_X <- latlon$NAD83_X[match(dendro_all$stemID, latlon$stemID)]
dendro_all$NAD83_Y <- latlon$NAD83_Y[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lat <- latlon$lat[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lon <- latlon$lon[match(dendro_all$stemID, latlon$stemID)]
##populate with lx, ly, and status (once ForestGEO 2018 census data is added, use that for base status)
census_2013 <- read.csv("V:/SIGEO/3-RECENSUS 2013/DATA/FINAL DATA to use, to share/scbi.stem2.csv")
field2013<- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/census3_coord_local_plot.csv")
#this .txt file was downloaded straight from CTFS at toward the end of data entry for the 3rd census Nov. 2018.
setnames(field2013, old="qx", new="lx")
setnames(field2013, old="qy", new="ly")
dendro_all$lx <- field2013$lx[match(dendro_all$stemID, field2013$stemid)]
dendro_all$ly <- field2013$ly[match(dendro_all$stemID, field2013$stemid)]
##can also do this another way from the census field forms. Not as accurate since you're matching by tag as opposed to stemID
#library(openxlsx)
#field2013 <- read.xlsx("V:/SIGEO/2-RECENSUS 2018/DATA/Forms to PRINT/QUADRAT_to_print.xlsx", sheet="QUAD_to_print", startRow=6)
#dendro_all$lx <- field2013$lx[match(dendro_all$tag, field2013$tag)]
#dendro_all$ly <- field2013$ly[match(dendro_all$tag, field2013$tag)]
##update status from most recent mortality data (this will update only some of the trees, hence why the census data is used first)
mortality_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data_private/SCBI_mortality/raw data/Mortality_Survey_2018.csv")
dendro_all$status <- mortality_2018$new.status[match(dendro_all$tag, mortality_2018$tag)]
missing <- ifelse(is.na(dendro_all$status), dendro_all$tag, "")
missingdf <- dendro_all[!complete.cases(dendro_all$status),]
missingdf <- missingdf[c(1:2)]
setnames(census_2013, old=c("StemTag"), new=c("stemtag"))
dendro_test <- merge(missingdf, census_2013[,c("tag", "stemtag","status")], by=c("tag","stemtag"))
dendro_all <- merge(dendro_all, dendro_test, by="tag", all.x=TRUE)
setnames(dendro_all, old="stemtag.x", new="stemtag")
library(tidyr)
dendro_all <- unite(dendro_all, status, status.x, status.y)
dendro_all$status <- gsub("_NA", "", dendro_all$status)
dendro_all$status <- gsub("NA_", "", dendro_all$status)
dendro_all$status <- gsub("PD", "D", dendro_all$status)
dendro_all$status <- gsub("DS", "D", dendro_all$status)
dendro_all$status <- gsub("DC", "D", dendro_all$status)
dendro_all$status <- gsub("AU", "A", dendro_all$status)
##get rid of NA
dendro_all$biannual[is.na(dendro_all$biannual)] <- 0
dendro_all$intraannual[is.na(dendro_all$intraannual)] <- 0
dendro_all$cored[is.na(dendro_all$cored)] <- 1
census_2008 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem1.csv")
dendro_all$dbh2008 <- census_2008$dbh[match(dendro_all$stemID, census_2008$stemID)]
dendro_all$dbh2013 <- census_2013$dbh[match(dendro_all$stemID, census_2013$stemID)]
dendro_all$dbh2008 <- round(dendro_all$dbh2008,1)
dendro_all$dbh2013 <- round(dendro_all$dbh2013,1)
dendro_all$gx <- round(dendro_all$gx,1)
dendro_all$gy <- round(dendro_all$gy,1)
##re-order
dendro_all <- dendro_all[c(1:6,21:22,11:13,10,7,14:15,8:9,16:19)]
#get rid of final duplicates now that all rows are the same
dendro_all <- dendro_all[!duplicated(dendro_all),]
View(dendro_all)
q <- subset(dendro_all, dendro_all$dbh2013<100)
View(q)
q <- subset(dendro_all, dendro_all$dbh2013<100 & dendro_all>=0)
q <- subset(dendro_all, dendro_all$dbh2013<100 & dendro_all$dbh2013>=0)
View(q)
dendro_all$dbh2013 <- as.numeric(dendro_all$dbh2013)
q <- subset(dendro_all, dendro_all$dbh2013<100 & dendro_all$dbh2013>=0)
View(q)
View(dendro_all)
census_2018 <- read.csv("I:/recensus2018.csv")
cores <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/climate_sensitivity_cores/data/census_data_for_cored_trees.csv")
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
library(data.table)
setnames(cores, old=c("StemTag"), new=c("stemtag"))
setnames(dendro_trees, old=c("mortality.year"), new=c("status"))
library(tidyr)
dendro_trees$status <- ifelse(dendro_trees$status=="[:digit:]", "A", "D") #this ifelse code is backwards from what it should be but for some reason it's producing the right output.
dendro_trees$status <- replace_na(dendro_trees$status, "A")
dendro_trees$year.cored <-cores$year.cored[match(dendro_trees$tag,cores$tag)]
dendro_merge <- merge(dendro_trees, cores, by=c("tag", "stemtag", "sp", "quadrat", "treeID", "stemID", "status", "gx", "gy","year.cored"), all.x=TRUE, all.y=TRUE)
dendro_all <- dendro_merge[c(1:13,17:22)]
##order the data and remove the crossovers (btwn biannual and cored) that don't have biannual marked already
dendro_all <- dendro_all[order(dendro_all$tag,dendro_all$biannual),]
dendro_all$stemID[is.na(dendro_all$stemID)] <- 0
##WARNING:assign stemID values for 30365 and 131352 (discrepancy with 2013 census). THIS PART SHOULD BE DELETED once the 2018 census data includes these tags with the appropriate info.
dendro_all[91,6]=11
dendro_all[867,6]=12
dendro_all<-dendro_all[!duplicated(dendro_all$stemID),]
##populate with geographic coordinates
latlon <- read.csv("V:/SIGEO/GIS_data/dendroband surveys/Merged_dendroband_utm_lat_lon.csv")
dendro_all$NAD83_X <- latlon$NAD83_X[match(dendro_all$stemID, latlon$stemID)]
dendro_all$NAD83_Y <- latlon$NAD83_Y[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lat <- latlon$lat[match(dendro_all$stemID, latlon$stemID)]
dendro_all$lon <- latlon$lon[match(dendro_all$stemID, latlon$stemID)]
##populate with lx, ly, and status (once ForestGEO 2018 census data is added, use that for base status)
census_2013 <- read.csv("V:/SIGEO/3-RECENSUS 2013/DATA/FINAL DATA to use, to share/scbi.stem2.csv")
field2013<- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/census3_coord_local_plot.csv")
#this .txt file was downloaded straight from CTFS at toward the end of data entry for the 3rd census Nov. 2018.
setnames(field2013, old="qx", new="lx")
setnames(field2013, old="qy", new="ly")
dendro_all$lx <- field2013$lx[match(dendro_all$stemID, field2013$stemid)]
dendro_all$ly <- field2013$ly[match(dendro_all$stemID, field2013$stemid)]
##can also do this another way from the census field forms. Not as accurate since you're matching by tag as opposed to stemID
#library(openxlsx)
#field2013 <- read.xlsx("V:/SIGEO/2-RECENSUS 2018/DATA/Forms to PRINT/QUADRAT_to_print.xlsx", sheet="QUAD_to_print", startRow=6)
#dendro_all$lx <- field2013$lx[match(dendro_all$tag, field2013$tag)]
#dendro_all$ly <- field2013$ly[match(dendro_all$tag, field2013$tag)]
##update status from most recent mortality data (this will update only some of the trees, hence why the census data is used first)
mortality_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data_private/SCBI_mortality/raw data/Mortality_Survey_2018.csv")
dendro_all$status <- mortality_2018$new.status[match(dendro_all$tag, mortality_2018$tag)]
missing <- ifelse(is.na(dendro_all$status), dendro_all$tag, "")
missingdf <- dendro_all[!complete.cases(dendro_all$status),]
missingdf <- missingdf[c(1:2)]
setnames(census_2013, old=c("StemTag"), new=c("stemtag"))
dendro_test <- merge(missingdf, census_2013[,c("tag", "stemtag","status")], by=c("tag","stemtag"))
dendro_all <- merge(dendro_all, dendro_test, by="tag", all.x=TRUE)
setnames(dendro_all, old="stemtag.x", new="stemtag")
library(tidyr)
dendro_all <- unite(dendro_all, status, status.x, status.y)
dendro_all$status <- gsub("_NA", "", dendro_all$status)
dendro_all$status <- gsub("NA_", "", dendro_all$status)
dendro_all$status <- gsub("PD", "D", dendro_all$status)
dendro_all$status <- gsub("DS", "D", dendro_all$status)
dendro_all$status <- gsub("DC", "D", dendro_all$status)
dendro_all$status <- gsub("AU", "A", dendro_all$status)
##get rid of NA
dendro_all$biannual[is.na(dendro_all$biannual)] <- 0
dendro_all$intraannual[is.na(dendro_all$intraannual)] <- 0
dendro_all$cored[is.na(dendro_all$cored)] <- 1
census_2008 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_main_census/data/census-csv-files/scbi.stem1.csv")
census_2018 <- read.csv("I:/recensus2018.csv")
dendro_all$dbh2008 <- census_2008$dbh[match(dendro_all$stemID, census_2008$stemID)]
dendro_all$dbh2013 <- census_2013$dbh[match(dendro_all$stemID, census_2013$stemID)]
#dendro_all$dbh2018 <- census_2018$DBH[]
dendro_all$dbh2008 <- round(dendro_all$dbh2008,1)
dendro_all$dbh2013 <- round(dendro_all$dbh2013,1)
dendro_all$gx <- round(dendro_all$gx,1)
dendro_all$gy <- round(dendro_all$gy,1)
##re-order
dendro_all <- dendro_all[c(1:6,21:22,11:13,10,7,14:15,8:9,16:19)]
#get rid of final duplicates now that all rows are the same
dendro_all <- dendro_all[!duplicated(dendro_all),]
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data")
write.csv(dendro_all, "dendro_cored_full.csv", row.names=FALSE)
View(dendro_all)
write.csv(dendro_all, "dendro_cored_full.csv", row.names=FALSE)
write.csv(dendro_all, "dendro_cored_full1.csv", row.names=FALSE)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro18 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2018.csv")
dendrofull <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv")
##list to fix
replace <- dendro18[grep("RD", dendro18$codes), ]
##list to replace
dead <- dendro_trees[which(!(is.na(dendro_trees$mortality.year))), ]
dendrofull$dbhall <- pmax(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
dead$dbhdead <- dendrofull$dbhall[match(dead$stemID, dendrofull$stemID)]
dead <- dead[, c(1:7,22,8:21)]
View(dead)
View(dendro_trees)
View(dendrofull)
View(dendro18)
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendro18 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2018.csv")
dendrofull <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv")
##list to fix
replace <- dendro18[grep("RD", dendro18$codes), ]
##list to replace
dead <- dendro_trees[which(!(is.na(dendro_trees$mortality.year))), ]
dendrofull$dbhall <- pmax(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
dead$dbhdead <- dendrofull$dbhall[match(dead$stemID, dendrofull$stemID)]
dead <- dead[, c(1:7,22,8:21)]
View(dead)
getwd()
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data")
write.csv(dead, "dead_to_replace.csv", row.names=FALSE)
dead <- dead[with(dead, order(dbhdead)), ]
dendro18 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/scbi.dendroAll_2018.csv")
##list to fix
fix <- dendro18[grep("RD", dendro18$codes), ]
##list to replace
dendro_trees <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendro_trees.csv")
dendrofull <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/cored_dendroband_crown_position_data/dendro_cored_full.csv")
dead <- dendro_trees[which(!(is.na(dendro_trees$mortality.year))), ]
dendrofull$dbhall <- pmax(dendrofull$dbh2008, dendrofull$dbh2013, dendrofull$dbh2018)
dead$dbhdead <- dendrofull$dbhall[match(dead$stemID, dendrofull$stemID)]
dead <- dead[, c(1:7,22,8:21)]
rm(replace)
ANPP <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/results/dendro_trees_ANPP.csv")
View(ANPP)
##determine composition of replacement species
ANPP <- ANPP[with(ANPP, order("ANPP.ANPP_Mg.C.ha1.y1_10cm")), ]
View(ANPP)
##determine composition of replacement species
ANPP <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/results/dendro_trees_ANPP.csv")
ANPP <- ANPP[with(ANPP, order(ANPP.ANPP_Mg.C.ha1.y1_10cm)), ]
View(ANPP)
ANPP <- ANPP[with(ANPP, order(-ANPP.ANPP_Mg.C.ha1.y1_10cm)), ]
View(ANPP)
ANPP$%totalANPP <- ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm / sum(ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm)
ANPP$percent.totalANPP <- ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm / sum(ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm)
View(ANPP)
ANPP$percent.totalANPP <- ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm / (sum(ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm)*100)
View(ANPP)
##ignoring litu (over-represented), find relative share of each sp in the top 6 species
ANPP <- ANPP[c("qual", "quru", "quve", "qupr", "fram", "cagl"), ]
View(ANPP)
ANPP <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/results/dendro_trees_ANPP.csv")
ANPP <- ANPP[with(ANPP, order(-ANPP.ANPP_Mg.C.ha1.y1_10cm)), ]
##find the % ANPP contribution for each species
ANPP$percent.totalANPP <- ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm / (sum(ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm)*100)
View(ANPP)
##ignoring litu (over-represented), find relative share of each sp in the top 6 species
ANPP <- ANPP[c(16,18,19,17,10,4), ]
View(ANPP)
ANPP <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/results/dendro_trees_ANPP.csv")
ANPP <- ANPP[with(ANPP, order(-ANPP.ANPP_Mg.C.ha1.y1_10cm)), ]
##find the % ANPP contribution for each species
ANPP$percent.totalANPP <- ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm / (sum(ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm)*100)
##ignoring litu (over-represented), find relative share of each sp in the top 6 species
ANPP <- ANPP[c(2:7), ]
View(ANPP)
ANPP <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/results/dendro_trees_ANPP.csv")
ANPP <- ANPP[with(ANPP, order(-ANPP.ANPP_Mg.C.ha1.y1_10cm)), ]
##find the % ANPP contribution for each species
ANPP$percent.totalANPP <- (ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm / sum(ANPP$ANPP.ANPP_Mg.C.ha1.y1_10cm))*100
##ignoring litu (over-represented), find relative share of each sp in the top 6 species
ANPP <- ANPP[c(2:7), ]
View(ANPP)
##determine number of individuals to be replacements by finding the % contribution within the subset, then multiplying by the total number of trees that need to be replaced (66).
ANPP$n.replace <- (ANPP$percent.totalANPP / sum(ANPP$percent.totalANPP))*66
View(ANPP)
ANPP$n.replace <- round(ANPP$n.replace, digits=0)
View(ANPP)
length(dead[dead(dead$dbhdead <=350), ])
length(dead[dead$dbhdead <=350, ])
length(dead[dead$dbhdead >350, ])
length(subset(dead, dead$dbhdead >350)
)
length(subset(dead, dead$dbhdead <=350))
dead$dbhdead <- as.numeric(dead$dbhdead)
length(subset(dead, dead$dbhdead <=350))
length(subset(dead, dead$dbhdead >350))
subset(dead, dead$dbhdead >350)
##split evenly by size class
over.350 <- dead[dead$dbhdead > 350, ]
under.350 <- dead[dead$dbhdead <= 350, ]
View(over.350)
length(dead$dbhdead>350)
?length
dbhdead <- c(dead$dbhdead)
length(dbhdead>350)
