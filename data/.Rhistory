scale_fill_brewer(name="AirTemp_C",palette="Blues") +
geom_line(aes(x=Year,color="RH"),size=1) +
ggtitle("Air temperature and Relative humidity") +
labs(x = "Timestamp", y = "%") +
theme_grey()
#relative humidity and temperature
ggplot(test, aes(x=TIMESTAMP_TS, y="RH_Avg_%")) +
geom_bar(aes(fill=T_Air1_Avg_C),stat='identity', position='identity') +
scale_fill_brewer(name="AirTemp_C",palette="Blues") +
geom_line(aes(x=TIMESTAMP_TS,color="RH"),size=1) +
ggtitle("Air temperature and Relative humidity") +
labs(x = "Timestamp", y = "%") +
theme_grey()
#relative humidity and temperature
ggplot(test, aes(x=TIMESTAMP_TS, y="RH_Avg_%")) +
geom_bar(aes(fill=T_Air1_Avg_C),stat='identity', position='identity') +
scale_fill_brewer(name="AirTemp_C") +
geom_line(aes(x=TIMESTAMP_TS,color="RH"),size=1) +
ggtitle("Air temperature and Relative humidity") +
labs(x = "Timestamp", y = "%") +
theme_grey()
#relative humidity and temperature
ggplot(test, aes(x=TIMESTAMP_TS, y="RH_Avg_%")) +
geom_bar(aes(fill=T_Air1_Avg_C),stat='identity', position='identity') +
scale_fill_grey() +
geom_line(aes(x=TIMESTAMP_TS,color="RH"),size=1) +
ggtitle("Air temperature and Relative humidity") +
labs(x = "Timestamp", y = "%") +
theme_grey()
#horizontal wind speed and direction
ggplot(test, aes(x=TIMESTAMP_TS)) +
geom_line(aes(y = "WS_WVc(1)_m/s", color = "Wind speed")) +
geom_line(aes(y = "WS_WVc(2)_m/s", color = "Wind direction")) +
labs(title= "Wind speed and direction", x= "Timestamp", y= "Air temperature Celsius") +
theme(legend.position = "right") +
theme_grey()
range(test$`WS_WVc(1)_m/s`)
NaN %in% test$`WS_WVc(1)_m/s`
?grepl
test$`WS_WVc(1)_m/s` <- gsub(NaN, NA, test$`WS_WVc(1)_m/s`)
is.na(test$`WS_WVc(1)_m/s`)
range(test$`WS_WVc(1)_m/s`)
data_2018 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data/2018_test_for_Rscript.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub(NaN, NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
range(test$`WS_WVc(1)_m/s`)
View(test)
data_2018 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data/2018_test_for_Rscript.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NaN", NA, test$`WS_WVc(1)_m/s`)
is.na(test$`WS_WVc(1)_m/s`)
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NaN", "NA", test$`WS_WVc(1)_m/s`)
is.na(test$`WS_WVc(1)_m/s`)
NaN %in% test$`WS_WVc(1)_m/s`
data_2018 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data/2018_test_for_Rscript.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NaN", "NA", test$`WS_WVc(1)_m/s`)
View(test)
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
View(test)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
range(test$`WS_WVc(1)_m/s`)
data_2018 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data/2018_test_for_Rscript.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
range(test$`WS_WVc(1)_m/s`)
test$`WS_WVc(1)_m/s` <- as.factor(test$`WS_WVc(1)_m/s`)
range(test$`WS_WVc(1)_m/s`)
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#horizontal wind speed and direction
par(mar = c(5,5,2,5))
with(test, plot(TIMESTAMP_TS, "WS_WVc(1)_m/s", type="l", col="red3",
ylab="Wind speed in m/s"))
with(test, plot("TIMESTAMP_TS", "WS_WVc(1)_m/s", type="l", col="red3",
ylab="Wind speed in m/s"))
par(new = T)
with(test, plot(TIMESTAMP_TS, "WS_WVc(2)_m/s", pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2))
with(test, plot("TIMESTAMP_TS", "WS_WVc(2)_m/s", pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2))
range(test$`WS_WVc(1)_m/s`, na.rm=TRUE)
data_2018 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data/2018_test_for_Rscript.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
range(test$`WS_WVc(1)_m/s`, na.rm=TRUE)
## add extra space to right margin of plot within frame
par(mar=c(5, 4, 4, 6) + 0.1)
## Plot first set of data and draw its axis
plot("TIMESTAMP_TS", "WS_WVc(1)_m/s", pch=16, axes=FALSE, ylim=c(0,5.5),
xlab="", ylab="", type="b",col="black", main="Wind speed and direction")
axis(2, ylim=c(0,5.5),col="black",las=1)  ## las=1 makes horizontal labels
axis(2, ylim=c(0,6),col="black",las=1)  ## las=1 makes horizontal labels
?plot
## Plot first set of data and draw its axis
plot(x=test$TIMESTAMP_TS, y=test$'WS_WVc(1)_m/s', pch=16, axes=FALSE, ylim=c(0,5.5),
xlab="", ylab="", type="b",col="black", main="Wind speed and direction")
axis(2, ylim=c(0,6),col="black",las=1)  ## las=1 makes horizontal labels
mtext("Wind speed m/s",side=2,line=2.5)
box()
## Plot first set of data and draw its axis
plot(x=test$TIMESTAMP_TS, y=test$'WS_WVc(1)_m/s', pch=16, axes=FALSE, ylim=c(0,6),
xlab="", ylab="", type="b",col="black", main="Wind speed and direction")
axis(2, ylim=c(0,6),col="black",las=1)  ## las=1 makes horizontal labels
mtext("Wind speed m/s",side=2,line=2.5)
box()
## Allow a second plot on the same graph
par(new=TRUE)
## Plot the second plot and put axis scale on right
plot(x=test$TIMESTAMP_TS, y=test$'WS_WVc(2)_m/s', pch=15,
xlab="", ylab="", ylim=c(0,360), axes=FALSE, type="b", col="red")
## a little farther out (line=4) to make room for labels
mtext("Wind direction (degrees)",side=4,col="red",line=4)
axis(4, ylim=c(0,360), col="red",col.axis="red",las=1)
## Draw the time axis
axis(1,pretty(range(test$TIMESTAMP_TS),10))
mtext("Timestamp",side=1,col="black",line=2.5)
class(test$TIMESTAMP_TS)
#wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle() +
labs(x="Timestamp", y="Wind Speed m/s")
#wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed 2018") +
labs(x="Timestamp", y="Wind Speed m/s")
#relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity 2018") +
labs(x="Timestamp", y="Relative humidity %") +
theme_grey()
#air temperature sensors 1 and 2 ####
ggplot(test, aes(x=TIMESTAMP_TS)) +
geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor", x= "Timestamp", y= "Air temperature Celsius") +
theme(legend.position = "right") +
theme_grey()
#solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR") +
labs(x="Timestamp", y="Solar radiation W/m2") +
theme_grey()
#precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation") +
labs(x="Timestamp", y="Precipitation in 5-min. average (mm)") +
theme_grey()
#battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
#solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
getwd()
##to make a pdf of any combination of graphs, simply do the following:
pdf(file="2018_Weather_Stats.pdf", width=12) #before running the graph scripts
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensors 1 and 2 ####
ggplot(test, aes(x=TIMESTAMP_TS)) +
geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
setwd("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data")
#read and reformat met data ####
data_2018 <- read.csv("V:/SIGEO/Met tower/Meteo DATA/TXT_Files/2018_Data/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
library(lubridate)
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert software NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#basic graphs of 5-minute averages:
library(ggplot2)
##to make a pdf of any combination of graphs, simply do the following:
pdf(file="2018_Weather_Stats.pdf", width=12) #before running the graph scripts
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensors 1 and 2 ####
ggplot(test, aes(x=TIMESTAMP_TS)) +
geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
#3 air temperature sensors 1 and 2 ####
ggplot(test, aes(x=TIMESTAMP_TS)) +
geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
#geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#3 air temperature sensors 1 and 2 ####
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
##to make a pdf of any combination of graphs, simply do the following:
pdf(file="2018_Weather_Stats.pdf", width=12) #before running the graph scripts
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
setwd("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns")
dendro2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/dendro_subset_ian_paper.csv")
library(ggplot2)
setwd("E:/Github_SCBI/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns")
dendro2018 <- read.csv("E:/Github_SCBI/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/dendro_subset_ian_paper.csv")
library(ggplot2)
setwd("E:/Github_SCBI/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/crown_position_analysis")
dendro2018 <- read.csv("E:/Github_SCBI/tree-growth-and-traits/dendro_subset_ian_paper.csv")
library(ggplot2)
setwd("E:/Github_SCBI/SCBI-ForestGEO-Data/tree_dimensions/tree_crowns/crown_position_analysis")
dendro2018 <- read.csv("E:/Github_SCBI/tree-growth-and-traits/dendro_subset_ian_paper.csv")
library(ggplot2)
?facet_wrap
setwd("E:/Github_SCBI/Dendrobands/data")
band18 <- read.csv("E:/Github_SCBI/Dendrobands/data/scbi.dendroAll_2018.csv")
library(chron)
band18$doy <- paste0(band18$month, sep="/", band18$day, sep="/", band18$year)
intra <- subset(band18, band18$intraannual == 1)
tagsintra <- c(unique(intra$tag))
surveys <- c(unique(intra$survey.ID))
intra$doy <- as.Date(intra$doy, format="%m/%d/%Y")
intra$doy <- factor(intra$doy, ordered=TRUE)
intraannual <- split(intra, f=c(intra$tag))
install.packages("chron")
setwd("E:/Github_SCBI/Dendrobands/data")
band18 <- read.csv("E:/Github_SCBI/Dendrobands/data/scbi.dendroAll_2018.csv")
library(chron)
band18$doy <- paste0(band18$month, sep="/", band18$day, sep="/", band18$year)
intra <- subset(band18, band18$intraannual == 1)
tagsintra <- c(unique(intra$tag))
surveys <- c(unique(intra$survey.ID))
intra$doy <- as.Date(intra$doy, format="%m/%d/%Y")
intra$doy <- factor(intra$doy, ordered=TRUE)
intraannual <- split(intra, f=c(intra$tag))
library(ggplot2)
for (i in names(intraannual)){
dendro <- intraannual[[i]]
q <- ggplot(data = dendro) +
aes(x = doy, y = measure, group=1) +
geom_line(color = "#0c4c8a") +
labs(title = paste0("Dendroband Growth 2018 ",sep="_", i),
x = "Date 2018",
y = "Caliper measurements") +
theme_minimal() +
facet_wrap(c("tag", "stemtag"), labeller="label_both")
print(q)
}
##this code makes graphs for every dendroband individual, with sub-graphs for those trees with multiple stems. The next bit is to do this same graph but be able to show the dendroband measurements but in dbh changes.
pdf(file = "Dendroband_caliper_growth_2018.pdf")
for (i in names(intraannual)){
dendro <- intraannual[[i]]
q <- ggplot(data = dendro) +
aes(x = doy, y = measure, group=1) +
geom_line(color = "#0c4c8a") +
labs(title = paste0("Dendroband Growth 2018 ",sep="_", i),
x = "Date 2018",
y = "Caliper measurements") +
theme_minimal() +
facet_wrap(c("tag", "stemtag"), labeller="label_both")
print(q)
}
dev.off()
