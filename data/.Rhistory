ForC_measurements <- read.csv("E:/Github_SCBI/ForC/data/ForC_measurements.csv")
View(ForC_measurements)
meas <- ForC_measurements
rm(ForC_measurements)
View(meas)
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$citation.ID <- gsub("NAC", NA, proto$citation.ID)
simple <- proto[!is.na(proto$citation.ID),] #now this contains only the citation.ID that are not NA
##these are the strings containing special characters
matches_citation <- unique (grep(paste(specials,collapse="|"),
simple$citation.ID, value=TRUE))
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
#1 find out occurrences in the columns ####
##this one tells you which special characters are present
##symbols has the special characters found within the strings from matches_sites.
##All of these are standard 'error' web codes for accented letters. Often times you will see these on Google search returns, for example.
##These were determined from searching these into Google, and are saved separately as a text doc in Windows 12252 encoding (UTF-8 will corrupt it).
symbol <- c( 'ÃƒÂ¡', 'ÃƒÂ¤', 'ÃƒÂ£', 'ÃŒÆ’', 'Ã©', 'Ã…Â½',  'ÃƒÂ¸', 'ÃƒÂ¸', 'Ã¶', 'ÃƒÂ¶', 'ÃƒÂ³', 'Ã…â€˜', 'ÃƒÂ¼', 'ÃƒÂº', 'ÃƒÅ¸', 'ÃƒÂ§', 'Ã…Â¾', 'Ã¢â‚¬â€œ', 'Ã¢â‚¬â„¢','ÃƒÂ[[:space:]]', 'ÃƒÂ', 'Ã…Â', 'Ã–', 'Ã¤')
equiv <- c('a', 'a', 'a', 'a', 'e', 'e', 'oe', 'oe', 'oe', 'oe', 'o', 'o', 'u','u','s','c','z', '-','\'', 'a', 'i', 'a', 'O', 'a')
##these are the strings containing special characters
matches_citation <- unique (grep(paste(specials,collapse="|"),
simple$citation.ID, value=TRUE))
##subset the simple df and run the loop to make sure substitution works. Then apply to meas.
simple <- simple[simple$citation.ID %in% matches_citation, ]
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$plot.name <- gsub("NAC", NA, proto$plot.name)
simple <- proto[!is.na(proto$plot.name), ]
matches_plots <- unique (grep(paste(specials,collapse="|"),
simple$plot.name, value=TRUE))
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$sites.sitename <- gsub("NAC", NA, proto$sites.sitename)
simple <- proto[!is.na(proto$sites.sitename),]
matches_sites <- unique (grep(paste(specials,collapse="|"),
simple$sites.sitename, value=TRUE))
ForC_cite <- read.csv("E:/Github_SCBI/ForC/data/ForC_citations.csv")
View(ForC_cite)
meas <- ForC_cite
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ', '\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
#2 below is the separate work-through for each column. The for-loop massively simplifies this ####
#2a citation.ID ####
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$citation.author <- gsub("NAC", NA, proto$citation.author)
simple <- proto[!is.na(proto$citation.author),]
matches_author <- unique (grep(paste(specials,collapse="|"),
simple$citation.author, value=TRUE))
matches
matches_author
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
matches_author <- unique (grep(paste(specials,collapse="|"),
simple$citation.author, value=TRUE))
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ', '\!', '\"', '\#', '\$', '\%', '\&', '\â', '\*', '\+', '\/', '\<', '\=', '\>', '\?', '\@', '\[',  '\]', '\^', '\`', '\{', '\|', '\}', '\~')
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ', '\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
matches_author <- unique (grep(paste(specials,collapse="|"),
simple$citation.author, value=TRUE))
#list of accented characters (from https://stackoverflow.com/questions/20495598/replace-accented-characters-in-r-with-non-accented-counterpart-utf-8-encoding)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
#2 below is the separate work-through for each column. The for-loop massively simplifies this ####
#2a citation.ID ####
proto <- meas #so as to leave meas as normal. Only edit for gsubbing the mistakes.
proto$citation.title <- gsub("NAC", NA, proto$citation.title)
simple <- proto[!is.na(proto$citation.title),]
matches_citation <- unique (grep(paste(specials,collapse="|"),
simple$citation.title, value=TRUE))
matches_title <- unique (grep(paste(specials,collapse="|"),
simple$citation.title, value=TRUE))
punct <- c('\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
matches_title <- unique (grep(paste(punct,collapse="|"),
simple$citation.title, value=TRUE))
matches_title
"\&" %in% simple$citation.title
"\\&" %in% simple$citation.title
matches_title <- unique (grep(paste(specials,collapse="|"),
simple$citation.title, value=TRUE))
matches_title <- unique (grep(paste(punct,collapse="|"),
simple$citation.title, value=TRUE))
install.packages("reprex")
library(reprex)
?reprex
unwanted_array = c('ÃƒÂ¡'='a', 'ÃƒÂ¤'='a', 'ÃƒÂ£'='a', 'ÃŒÆ’'='a', 'Ã©'='e', 'Ã…Â½'='e',  'ÃƒÂ¸'='oe', 'ÃƒÂ¸'='oe', 'Ã¶'='oe', 'ÃƒÂ¶'='oe', 'ÃƒÂ³'='o', 'Ã…â€˜'='o', 'ÃƒÂ¼'='u', 'ÃƒÂº'='u', 'ÃƒÅ¸'='s', 'ÃƒÂ§'='c', 'Ã…Â¾'='z', 'Ã¢â‚¬â€œ'='-', 'Ã¢â‚¬â„¢'='\'','ÃƒÂ[[:space:]]'='a', 'ÃƒÂ'='i', 'Ã…Â'='a', 'Ã–'='O', 'Ã¤'='a',
'Š'='S', 'š'='s', 'Ž'='Z', 'ž'='z', 'À'='A', 'Á'='A', 'Â'='A', 'Ã'='A', 'Ä'='A', 'Å'='A', 'Æ'='A', 'Ç'='C', 'È'='E', 'É'='E','Ê'='E', 'Ë'='E', 'Ì'='I', 'Í'='I', 'Î'='I', 'Ï'='I', 'Ñ'='N', 'Ò'='O', 'Ó'='O', 'Ô'='O', 'Õ'='O', 'Ö'='O', 'Ø'='O', 'Ù'='U','Ú'='U', 'Û'='U', 'Ü'='U', 'Ý'='Y', 'Þ'='B', 'ß'='Ss', 'à'='a', 'á'='a', 'â'='a', 'ã'='a', 'ä'='a', 'å'='a', 'æ'='a', 'ç'='c','è'='e', 'é'='e', 'ê'='e', 'ë'='e', 'ì'='i', 'í'='i', 'î'='i', 'ï'='i', 'ð'='o', 'ñ'='n', 'ò'='o', 'ó'='o', 'ô'='o', 'õ'='o','ö'='o', 'ø'='o', 'ù'='u', 'ú'='u', 'û'='u', 'ü'='u', 'ý'='y', 'ý'='y', 'þ'='b', 'ÿ'='y')
# Test vector of words with bad characters
s <- c("San JosÃ©_2008_dghe", "Ã–quist_2016_ashge", "MÃ¤kiranta_2006_sdhe", "SanaÂ_2012_fghef")
s_split <- strsplit(s, "")  # split each word into characters
unlist(lapply(s_split, function(w) {
matches <- which(w %in% names(unwanted_array)) # find problem letters
w[matches] <- unwanted_array[w[matches]] # replace 'em
paste(w, collapse = "") # reassemble letters to word
}))
ForC_cite <- read.csv("E:/Github_SCBI/ForC/data/ForC_citations.csv")
View(ForC_cite)
specials <- c('Š', 'š', 'Ž', 'ž', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É','Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù','Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç','è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ','ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ý', 'þ', 'ÿ')
punct <- c('\\!', '\\"', '\\#', '\\$', '\\%', '\\&', '\\â', '\\*', '\\+', '\\/', '\\<', '\\=', '\\>', '\\?', '\\@', '\\[',  '\\]', '\\^', '\\`', '\\{', '\\|', '\\}', '\\~')
proto <- ForC_cite
matches_authors <- unique (grep(paste(specials,collapse="|"),
proto$citation.author, value=TRUE))
matches_title <- unique (grep(paste(specials,collapse="|"),
proto$citation.title, value=TRUE))
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.title, value=TRUE))
"\\&" %in% proto$citation.title
"\&" %in% proto$citation.title
punct %in% proto$citation.title
specials %in% proto$citation.title
specials %in% proto$citation.author
punct %in% proto$citation.author
matches_title
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.title, value=TRUE))
punct %in% proto$citation.title
"\\&" %in% proto$citation.title
"\&" %in% proto$citation.title
punct[1] %in% proto$citation.title
str(proto)
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.author, value=TRUE))
proto$citation.title <- as.character(proto$citation.title)
matches_title <- unique (grep(paste(punct,collapse="|"),
proto$citation.title, value=TRUE))
punct %in% as.character(proto$citation.author)
test <- c('&', ".", '$', "#")
punct %in% as.character(test)
matches_title <- unique (grep(paste(test,collapse="|"),
proto$citation.title, value=TRUE))
punct %in% test
grep(punct, test)
paste0(test)
paste0(test, collapse = T)
paste0(test, collapse = |)
paste0(test, collapse = )
paste0(test, collapse = "")
grep(paste0(punct, collapse = ""), paste0(test, collapse = ""))
memory.limit()
install.packages("fgeo")
update.packages()
install.packages("devtools")
devtools::install_github("forestgeo/fgeo@*release", upgrade = "never")
library(fgeo)
install.packages("devtools")
devtools::install_github("forestgeo/fgeo", upgrade = "never")
install.packages("devtools")
library(fgeo)
devtools::install_github("forestgeo/fgeo", upgrade = "never")
library(fgeo)
bands_2018 <- read.csv("E:/Github_SCBI/Dendrobands/data/scbi.dendroAll_2018.csv")
View(bands_2018)
?fgeo
?fgeo.tool
?fgeo.analyze
map_bands <- bands_2018 %>%
bands_2018[survey.ID >= 2018.14, ]
map_bands <- bands_2018 %>%
bands_2018[ ,bands_2018$survey.ID >= 2018.14]
map_bands <- bands_2018 %>%
filter(survey.ID >= 2018.14)
View(map_bands)
map_bands$intraannual == 1
length(map_bands$intraannual == 1)
c <- (map_bands$intraannual == 1, value=TRUE)
c <- map_bands$intraannual
1 %in% c
c
sum(c>0)
dendro_trees <- read.csv("E:/Github_SCBI/Dendrobands/data/dendro_trees.csv")
View(dendro_trees)
filter(mortality.year %in% c("2018", "NA")
)
dendro_trees <- read.csv("E:/Github_SCBI/Dendrobands/data/dendro_trees.csv")
dendro <- dendro_trees %>%
filter(mortality.year %in% c("2018", "NA"))
View(dendro)
dendro <- dendro_trees %>%
filter(mortality.year %in% "2018" & is.na(mortality.year))
dendro <- dendro_trees %>%
filter(mortality.year %in% "2018" | is.na(mortality.year))
autoplot(tag(map_bands))
?autoplot
autoplot(sp(map_bands))
dendro_trees <- read.csv("E:/Github_SCBI/Dendrobands/data/dendro_trees.csv")
View(dendro_trees)
bands_2018 <- dendro_trees[dendro_trees$mortality.year == "2018" & is.na(dendro_trees$mortality.year)]
bands_2018 <- dendro_trees[, dendro_trees$mortality.year == "2018" & is.na(dendro_trees$mortality.year)]
bands_2018 <- dendro_trees[dendro_trees$mortality.year == "2018" & is.na(dendro_trees$mortality.year), ]
View(bands_2018)
bands_2018 <- dendro_trees[ ,dendro_trees$mortality.year == "2018" & is.na(dendro_trees$mortality.year)]
bands_2018 <- dendro_trees[ ,dendro_trees$mortality.year == "2018" | is.na(dendro_trees$mortality.year)]
bands_2018 <- dendro_trees[dendro_trees$mortality.year == "2018" | is.na(dendro_trees$mortality.year), ]
View(bands_2018)
View(bands_2018)
library(ggmap)
test <- get_openstreetmap()
test <- get_openstreetmap("virginia")
test <- get_openstreetmap("virginia", extent="normal")
?get_openstreetmap
?get_map
test <- get_map(location=c(lon=mean(bands_2018$lon), lat=mean(bands_2018$lat)), maptype="terrain", source="osm")
test <- get_map(location=c(lon=mean(bands_2018$lon, na.rm=TRUE), lat=mean(bands_2018$lat, na.rm=TRUE)), maptype="terrain", source="osm")
install.packages("shiny", "leaflet", "tidyverse")
install.packages("shiny", "leaflet", "tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("tidyverse")
dendro_trees <- read.csv("E:/Github_SCBI/Dendrobands/data/dendro_trees.csv")
bands_2018 <- dendro_trees[dendro_trees$mortality.year == "2018" | is.na(dendro_trees$mortality.year), ]
?leaflet
library(leaflet)
?leaflet
?addMarkers
map <- leaflet() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addMarkers(data=bands_2018, weight=2, fill=TRUE, fillColor="blue", fillOpacity = 0.25) %>%
addScaleBar(position = "bottomleft") %>%
addLayersControl(
baseGroups = c("Map", "Topo", "Relief"),
options = layersControlOptions(collapsed = FALSE)
)
load("V:/SIGEO/Maps in R/scbi.stem2.rdata")
View(scbi.stem2)
rm(scbi.stem2)
library(rgdal)
plot <- readOGR("V:/SIGEO/GIS_data/20m_grid.shp")
deer <- readOGR("V:/SIGEO/GIS_data/deer_exclosure_2011.shp")
roads <- readOGR("V:/SIGEO/GIS_data/SCBI_roads_edits.shp")
streams <- readOGR("V:/SIGEO/GIS_data/SCBI_streams_edits.shp")
ggplot() +
geom_point(data=bands_2018, aes(x=lon, y=lat), color="red")
library(ggplot2)
ggplot() +
geom_point(data=bands_2018, aes(x=lon, y=lat), color="red")
plot(plot)
lines(deer)
plot(deer, add = T, col = "red")
plot(plot)
plot(deer, add = T, border = "red")
plot(streams, add = T, col = "blue")
plot(roads, add = T)
head(bands_2018)
plot
crs(plot)
head(bands_2018)
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
bands_2018 <- bands_2018[!is.na(bands_2018$NAD83_X & !is.na(bands_2018$NAD83_Y)),]
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
bands_2018 <- bands_2018[!any(is.na(bands_2018$NAD83_X, bands_2018$NAD83_Y)),]
bands_2018 <- bands_2018[!any(is.na(c(bands_2018$NAD83_X, bands_2018$NAD83_Y))),]
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
dendro_trees <- read.csv("E:/Github_SCBI/Dendrobands/data/dendro_trees.csv")
bands_2018 <- dendro_trees[dendro_trees$mortality.year == "2018" | is.na(dendro_trees$mortality.year), ]
#to start off, filter by all the trees that are alive as of the end of last year's fall survey.
bands_2018 <- dendro_trees[is.na(dendro_trees$mortality.year), ]
complete.cases(bands_2018[, c("NAD83_X", "NAD83_Y")])
table(complete.cases(bands_2018[, c("NAD83_X", "NAD83_Y")]))
bands_2018 <- bands_2018[complete.cases(bands_2018[, c("NAD83_X", "NAD83_Y")]),]
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
plot(bands_2018, add = T)
plot(bands_2018, add = T, pch = 16)
plot(plot)
plot(deer, add = T, border = "red")
plot(streams, add = T, col = "blue")
plot(roads, add = T)
bands_2018 <- bands_2018[complete.cases(bands_2018[, c("NAD83_X", "NAD83_Y")]),]
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
plot(bands_2018, add = T, pch = 21)
plot(plot)
plot(deer, add = T, border = "red")
plot(streams, add = T, col = "blue")
plot(roads, add = T)
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
plot(bands_2018, add = T, pch = 21, cex = 0.5)
plot(plot)
plot(deer, add = T, border = "red")
plot(streams, add = T, col = "blue")
plot(roads, add = T)
plot(bands_2018, add = T, pch = 21, cex = 0.5)
plot$ID
plot$PLOT
head(plot)
plot(PLOT[1], add = T, col = "purple", lwd = 2)
plot(plot[1], add = T, col = "purple", lwd = 2)
plot(plot[[1]], add = T, col = "red", lwd = 2)
View(bands_2018)
survey_areas <- readOGR("V:/SIGEO/GIS_data/dendroband surveys/dendroband (bi)annual/biannual_survey_areas.shp")
warnings()
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
plot(plot)
plot(deer, add = T, border = "red")
plot(streams, add = T, col = "blue")
plot(roads, add = T)
plot(bands_2018, add = T, pch = 21, cex = 0.5)
plot(survey_areas, add=T)
south_areas <- readOGR("V:/SIGEO/GIS_data/dendroband surveys/dendroband (bi)annual/biannual_south.shp")
north_areas <- readOGR("V:/SIGEO/GIS_data/dendroband surveys/dendroband (bi)annual/biannual_north.shp")
plot(south_areas, add=T)
plot(north_areas, add=T)
plot(south_areas, add=T, border = "purple")
plot(north_areas, add=T, border = "purple")
plot(deer, add = T, border = "black")
plot(streams, add = T, col = "blue")
plot(roads, add = T)
plot(south_areas, add=T, border = "purple")
plot(north_areas, add=T, border = "purple")
?plot
plot(roads, add = T, col = "#CC9900")
plot(roads, add = T, col = "#996600")
plot(south_areas, add=T, border = "#CCCCCC")
plot(north_areas, add=T, border = "#CCCCCC")
plot(north_areas, add=T, border = "#666666")
plot(south_areas, add=T, col = "#666666")
plot(north_areas, add=T, border = "#666666")
plot(south_areas, add=T, col = "#666666", lwd=3)
plot(north_areas, add=T, border = "#666666", lwd=3)
rm(south_areas)
rm(north_areas)
bands_2018 <- dendro_trees[is.na(dendro_trees$mortality.year), ]
bands_2018 <- bands_2018[complete.cases(bands_2018[, c("NAD83_X", "NAD83_Y")]),] # remove one tree with missing coordinates
##this should be fixed when 131352 is found with 2018 data!!!!
library(ggplot2)
library(rgdal)
plot <- readOGR("V:/SIGEO/GIS_data/20m_grid.shp")
deer <- readOGR("V:/SIGEO/GIS_data/deer_exclosure_2011.shp")
roads <- readOGR("V:/SIGEO/GIS_data/SCBI_roads_edits.shp")
streams <- readOGR("V:/SIGEO/GIS_data/SCBI_streams_edits.shp")
survey_areas <- readOGR("V:/SIGEO/GIS_data/dendroband surveys/dendroband (bi)annual/biannual_survey_areas.shp")
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
plot(plot)
plot(deer, add = T, border = "black")
plot(streams, add = T, col = "blue")
plot(roads, add = T, col = "#996600")
plot(south_areas, add=T, col = "#666666", lwd=3)
plot(north_areas, add=T, border = "#666666", lwd=3)
plot(bands_2018, add = T, pch = 21, cex = 0.5)
plot(survey_areas, add=T, col = "#666666", lwd=3)
setwd("E:/Github_SCBI/Dendrobands/data")
#we are using dendro_trees for this code as opposed to "scbi.dendroAll_YEAR.csv" because 1. dendro_trees reflects the data in the all of the YEAR files and 2. dendro_trees has the necessary mapping information in lx/ly, gx/gy, NAD83X/Y, AND lat/lon in decimal degrees.
dendro_trees <- read.csv("E:/Github_SCBI/Dendrobands/data/dendro_trees.csv")
#to start off, filter by all the trees that are alive as of the end of last year's fall survey.
bands_2018 <- dendro_trees[is.na(dendro_trees$mortality.year), ]
bands_2018 <- bands_2018[complete.cases(bands_2018[, c("NAD83_X", "NAD83_Y")]),] # remove one tree with missing coordinates
##this should be fixed when 131352 is found with 2018 data!!!!
library(ggplot2)
library(rgdal)
plot <- readOGR("V:/SIGEO/GIS_data/20m_grid.shp")
deer <- readOGR("V:/SIGEO/GIS_data/deer_exclosure_2011.shp")
roads <- readOGR("V:/SIGEO/GIS_data/SCBI_roads_edits.shp")
streams <- readOGR("V:/SIGEO/GIS_data/SCBI_streams_edits.shp")
survey_areas <- readOGR("V:/SIGEO/GIS_data/dendroband surveys/dendroband (bi)annual/biannual_survey_areas.shp")
coordinates(bands_2018) <- c("NAD83_X", "NAD83_Y")
plot(plot)
plot(deer, add = T, border = "black")
plot(streams, add = T, col = "blue")
plot(roads, add = T, col = "#996600")
plot(survey_areas, add=T, col = "#666666", lwd=3)
plot(bands_2018, add = T, pch = 21, cex = 0.5)
plot(survey_areas, add=T, col = "#666666", lwd=2)
plot(survey_areas, add=T, col = "#00000", lwd=2)
plot(survey_areas, add=T, col = "#000000", lwd=2)
plot(plot)+
plot(deer, add = T, border = "black")
plot(plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600")+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
ggplot() +
geom_polygon(data=counties, aes(x=long, y=lat, group=group))+
geom_point(data=mapdata, aes(x=x, y=y), color="red")
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600")+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
ggplot() +
geom_polygon(data=counties, aes(x=long, y=lat, group=group))+
geom_point(data=mapdata, aes(x=x, y=y), color="red")
scbi_plot <- readOGR("V:/SIGEO/GIS_data/20m_grid.shp")
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600")+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
ggplot() +
geom_polygon(data=counties, aes(x=long, y=lat, group=group))+
geom_point(data=mapdata, aes(x=x, y=y), color="red")
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
ggplot() +
geom_polygon(data=counties, aes(x=long, y=lat, group=group))+
geom_point(data=mapdata, aes(x=x, y=y), color="red")
rm(plot)
?text
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=tag)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag, cex=0.25)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag, cex=0.75)
?identify
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag, cex=0.75) +
identify(bands_2018, labels=bands_2018$tag)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag, cex=0.75) +
identify(bands_2018, labels=bands_2018$tag)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag, cex=0.75) +
identify(bands_2018, labels=bands_2018$tag, cex = 0.6)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag, cex=0.6)
plot(scbi_plot)+
plot(deer, add = T, border = "black")+
plot(streams, add = T, col = "blue")+
plot(roads, add = T, col = "#996600", lty=2)+
plot(survey_areas, add=T, col = "#000000", lwd=2)+
plot(bands_2018, add = T, pch = 21, cex = 0.5)+
text(bands_2018, labels=bands_2018$tag, cex=0.6, pos = 4)
