(data_biannual$quadrat %in% c(1216:1224))|
(data_biannual$quadrat %in% c(1316:1324))|
(data_biannual$quadrat %in% c(1416,1417,1422)), 5,
ifelse((data_biannual$quadrat %in% c(1419))|
(data_biannual$quadrat %in% c(1516:1524))|
(data_biannual$quadrat %in% c(1616:1624))|
(data_biannual$quadrat %in% c(1716:1724))|
(data_biannual$quadrat %in% c(1816:1824))|
(data_biannual$quadrat %in% c(1916:1924))|
(data_biannual$quadrat %in% c(2016:2024)), 6,
ifelse((data_biannual$quadrat %in% c(625:632))|
(data_biannual$quadrat %in% c(725:732))|
(data_biannual$quadrat %in% c(825:832))|
(data_biannual$quadrat %in% c(925:932))|
(data_biannual$quadrat %in% c(1025:1029,1031,1032)), 7,
ifelse((data_biannual$quadrat %in% c(1030))|
(data_biannual$quadrat %in% c(1125:1132))|
(data_biannual$quadrat %in% c(1225:1232))|
(data_biannual$quadrat %in% c(1325:1332))|
(data_biannual$quadrat %in% c(1425:1432)), 8,
ifelse((data_biannual$quadrat %in% c(1525:1532))|
(data_biannual$quadrat %in% c(1625:1632))|
(data_biannual$quadrat %in% c(1725:1732))|
(data_biannual$quadrat %in% c(1825:1832))|
(data_biannual$quadrat %in% c(1925:1932))|
(data_biannual$quadrat %in% c(2025:2032)), 9, "")))))))))
View(data_biannual)
scbi.dendroAll_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
View(scbi.dendroAll_2018)
data_entry_biannual_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
View(data_entry_biannual_2018)
rm(ls())
rm(ls)
rm(data_entry_biannual_2018)
rm(scbi.dendroAll_2018)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
?pdf
?ggplot
library(ggplot2)
?ggplot2
test <- merge(data_biannual, data_2018)
test <- merge(data_biannual, data_2018, by=c("tag", "stemID"))
View(data_2018)
View(data_biannual)
test <- merge(data_biannual, data_2018, by=c("tag", "stemtag"))
View(test)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
test <- rbind(data_biannual, data_2018)
names <- colnames(data_biannual) %in% colnames(data_2018)
names
names <- colnames(data_2018) %in% colnames(data_biannual)
names
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
setdiff(names2018, namesbi)
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
View(data_biannual)
View(data_2018)
View(data_biannual)
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
View(data_2018)
View(data_biannual)
test <- rbind(data_biannual, data_2018)
missing <- setdiff(namesbi, names2018)
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_biannual, data_2018)
View(test)
test <- rbind(data_2018, data_biannual)
arrange(test, survey.ID)
library(tidyverse)
arrange(test, survey.ID)
test <- arrange(test, survey.ID)
View(test)
test <- arrange(test, survey.ID&tag)
test <- test[order(survey.ID, tag)]
test <- test[order(survey.ID, tag),]
test <- test[order("survey.ID", "tag"),]
?sort
test <- rbind(data_2018, data_biannual)
test <- test[sort("survey.ID", "tag"),]
test <- test[order(test[,1], test[,3])]
test <- test[order(test$tag, test$survey.ID)]
test <- test[order(tag, survey.ID)]
test <- test[order(test[,1], test[,3]),]
install.packages("zoo")
?zoo
library(zoo)
?zoo
?na.locf
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test$new.band <- ifelse(test$new.band == "", 0, test$new.band)
View(test)
## these values are not always constant
test$new.band <- ifelse(test$new.band == NA, 0, test$new.band)
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test <- test[is.na(test$new.band)] <- 0
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
deadcodes
test$status <- ifelse(test$status == deadcodes, dead, alive)
test$status <- ifelse(test$status == deadcodes, "dead", "alive")
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
test$status <- ifelse((is.na(test$new.band))&(test$status == deadcodes), "dead", "alive")
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))|(test$status == deadcodes), "dead", "alive")
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))|(test$codes == deadcodes), "dead", ifelse((is.na(test$status)), "alive", test$status))
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))|(test$codes == deadcodes), "dead", "alive")
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))|(test$codes %in% deadcodes), "dead", "alive")
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead", "alive")
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
scbi.dendroAll_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
View(scbi.dendroAll_2018)
dendroID_chronology <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/dendroID_chronology.csv")
View(dendroID_chronology)
View(scbi.dendroAll_2018)
scbi.dendroAll_2018$dendroID <- dendroID_chronology$X2018.spring[match(scbi.dendroAll_2018$tag, dendroID_chronology$tag)]
getwd()
write.csv(scbi.dendroAll_2018, "scbi.dendroAll_2018.csv", row.names=FALSE)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
View(test)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
View(test)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
View(test)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead", "alive")
getwd()
write.csv(test, "scbi.dendroAll_2018.csv", row.names=FALSE)
View(test)
test$exactdate <- format(test$exactdate, "%Y-%m-%d")
?format
?strptime
test$exactdate <- format(test$exactdate, format="%Y-%m-%d")
test$exactdate <- format(as.Date(test$exactdate),"%Y-%m-%d")
?as.date
?as.Date
install.packages("lubridate")
library(lubridate)
install.packages("lubridate")
library(lubridate)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead", "alive")
View(test)
test$exactdate <- as.Date(parse_date_time(test$exactdate,"ymd"))
?parse_date_time
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead", "alive")
library(lubridate)
test$exactdate <- parse_date_time(c(test$exactdate))
test$exactdate <- parse_date_time(c(test$exactdate), "ymd")
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead", "alive")
View(test)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
data_biannual <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/resources/data_entry_forms/data_entry_biannual_2018.csv")
names2018 <- c(colnames(data_2018))
namesbi <- c(colnames(data_biannual))
## find the names that are in data_2018 but not in data_biannual
missing <- setdiff(names2018, namesbi)
## if need be, do the opposite
# missing <- setdiff(namesbi, names2018)
## add these missed names to data_biannual in order to combine to the master
data_biannual[missing] <- NA
data_biannual$area <- NULL #this column is only relevant for field
test <- rbind(data_2018, data_biannual)
test <- test[order(test[,1], test[,3]),] #order by tag and survey.ID
## these values are constant from the previous survey.ID
library(zoo)
test$biannual <- na.locf(test$biannual)
test$intraannual <- na.locf(test$intraannual)
test$lx <- na.locf(test$lx)
test$ly <- na.locf(test$ly)
test$stemID <- na.locf(test$stemID)
test$treeID <- na.locf(test$treeID)
test$dbh <- na.locf(test$dbh)
## these should be constant from previous survey, but obviously are updated whenever a new dendroband is installed
test$dendroID <- na.locf(test$dendroID)
test$type <- na.locf(test$type)
test$dendHt <- na.locf(test$dendHt)
## these values are not always constant
test$new.band <- ifelse(is.na(test$new.band), 0, test$new.band)
deadcodes <- c("DS", "DC", "DN", "DT")
test$status <- ifelse((is.na(test$status))&(test$codes %in% deadcodes), "dead", "alive")
View(test)
test$exactdate <- format(as.Date(test$exactdate,format="%m/%d/%Y"), "%Y-%m-%d")
write.csv(test, "scbi.dendroAll_2018.csv", row.names=FALSE)
scbi.stem2 <- read.csv("V:/SIGEO/3-RECENSUS 2013/DATA/FINAL DATA to use, to share/scbi.stem2.csv")
View(scbi.stem2)
library(viridis)
ggplot(scbi.stem2, aes(x = `dbh`, y = `sp`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(
title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground'
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
install.packages("ggplot")
install.packages("ggplot2")
ggplot2(scbi.stem2, aes(x = `dbh`, y = `sp`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(
title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground'
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
library(ggplot2)
ggplot2(scbi.stem2, aes(x = `dbh`, y = `sp`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(
title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground'
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
rm(scbi.stem2)
scbi.dendroAll_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
View(scbi.dendroAll_2018)
data_2018 <- read.csv("C:/Users/mcgregori/Dropbox (Smithsonian)/Github_Ian/Dendrobands/data/2018/scbi.dendroAll_2018.csv")
rm(scbi.dendroAll_2018)
#subset by the most recent survey and live trees
data_2019 <- subset(data_2018,survey.ID=="2018.14" & status=="alive")
View(data_2019)
data_2019$survey.ID <- ""
cols <- c("survey.ID", "exactdate", "measure", "codes", "notes", "status", "field.recorders", "data.enter", "new.band")
data_2019$cols <- ""
data_2019[,cols] <- ""
write.csv(data_2019, "scbi.dendroAll_2019.csv", row.names=FALSE)
#subset by the most recent survey and live trees
data_2019 <- subset(data_2018,survey.ID=="2018.14" & status=="alive")
cols <- c("survey.ID", "exactdate", "measure", "codes", "notes", "status", "field.recorders", "data.enter", "new.band")
data_2019[,cols] <- ""
View(data_2019)
write.csv(data_2019, "scbi.dendroAll_2019.csv", row.names=FALSE)
